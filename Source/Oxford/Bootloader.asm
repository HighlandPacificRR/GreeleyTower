	subtitle	"Bootloader.asm"	page;===========================================================================================;;  FileName: Bootloader.asm;  Date: 4/6/09;  File Version: 1.1.5;  ;  Author: David M. Flynn;  Company: Oxford V.U.E., Inc.;;============================================================================================; Notes:;  This file contains the general purpose routines used to implement a bootloader;  for the 16F877 on the Oxford V.U.E. Brain GP CPU.;;  To use:;   Call PwrUpTest once each power up.;   To force the ROM image file (b.b) to load next reset call SetUIPBit.;    Dispatch.asm looks to these buttons down together to call SetUIPBitBL_SetCode	EQU	0x18	;SW5 AND SW6;   To load an overlay set PM_FileNum to 1..9 then call UpdateProgMem.;    UpdateProgMem does not return, it will display Str_ErrorPtr if FNF or CSUM is bad or reboot.;;----------------------------------;  This code is included in Dispatch.asm if Dispatch.asm is not used include it in the main event loop;	if UsesBootloader;Bootloader trigger, if the correct buttons are down then set the bit to trigger; loading next time a reset occures.;	MOVLW	BL_SetCode	;BootLoader button combo;	SUBWF	Param78,W	;Button bits (positive logic);	SKPZ;	GOTO	NoBootload;	mCALL2To3	SetUIPBit;	MOVLW	StrResetNowPtr;	CALL	DispStrLine3;BD_Stop	GOTO	BD_Stop;NoBootload;	endif;-----------------------------------;  Strings used:;   Str_ErrorPtr	STR	'Error!';   StrResetNowPtr	STR	'Press Reset Now';   StrLoadRIPtr	STR	'Loading ROM Image';-----------------------------------;  Program Memory image file format:;   file is big endien;   File name of main image is "b.b";   A portion to the image may be swaped using filenames "b1.b", "b2.b", etc.;   Destination Address (word);   Length in words (word);   Checksum (word);   Upto 16,384 Bytes of data (0x2000 words);-----------------------------------;  EEPROM locations required:;   ePM_Flags	RES	1	;Used to track status;  ePM_Flags bits;   Update In Progress bitPM_UIP	EQU	0	;set at start of update, clr'd when donePM_UIPMask	EQU	0x01PM_UIPMaskClr	EQU	0x0E	;clr file number also;   First Boot FlagPM_FBF	EQU	1	;set only by programmerPM_FBFMask	EQU	0x02;   upper nibble is the file number 0..9;-----------------------------------;  Bank zero memory locations required:;   PM_Addr_Lo	RES	1	;Prog mem dest address;   PM_Addr_Hi	RES	1;   PM_Data_Lo	RES	1	;Current data;   PM_Data_Hi	RES	1;   PM_StopAddrL	RES	1	;Last address + 1;   PM_StopAddrH	RES	1;   PM_CSumL	RES	1	;Checksum;   PM_CSumH	RES	1;   PM_FileNum	RES	1	;File number 0=b.b, 1=b1.b, etc.;------------------------------------; This file was build to fit at 0x1F10..0x1FFF in segment 3.; Calls outside this segment:;  ZeroFName_D18,DOP_Ram_D18,;  find_file_D18,open_file_D18,close_file_D18;  ReadEE79_D18,WriteEEP79W_D18,lcd_GotoLine2_3,PrintString_D18;; The above callers should be placed at the beginning of segment 3 to minimize; the chance that they are moved.  If any of the callers are moved then the ; bootloader will fail.  If i2c_read1 is moved then the bootloader will fail.;;============================================================================================; Revision History;; 1.1.5    4/6/2009	Changed conditional UsesLCD>>PrintString; 1.1.4    12/30/2007	Added _GIE paranoid BCF, Changed to org 0x1F06; 1.1.3    5/2/2005	Added PM_FBF First Boot Flag; 1.1.2    10/22/2004  Copied I2C_Read into this routine to make it more robust.;	New origin is 0x1F08; 1.1.1    9/12/2004	Added notes to explain why/when the bootloaded will fail.; 1.1      8/30/2004	Modified for multi-file overlay support, added SetUIPBitW; 1.0      8/27/2004	First working version.; 1.0d1    8/21/2004	First Code;;============================================================================================	ifndef UseOldBL	constant	UseOldBL=1	endif;	if UseOldBL	ORG	0x1F08	else	ORG	0x1F06	endif;============================================================================================;;Routines in this file; Name	(additional stack words required) Description (Bank in/Bank out);============================================================================================; SetUIPBitW	(0+1) Set Update In Progress bit and file number; SetUIPBit	(1+1) Set Update In Progress bit; PwrUpTest	(1+4) If the Prog Mem checksum is missing or wrong UpdateProgMem; ReadPM_PI	(0)   Read data from Program Memory Param79(LSB):Param7A(MSB)=(PM_Addr++) (0/0); ReadPM	(0)   Read data from Program Memory Param79(LSB):Param7A(MSB)=(Param7C:Param7B); WritePM_PI	(0)   Write data to Program Memory (PM_Addr++)=Param79(LSB):Param7A(MSB); WritePM	(0)   Write data to Program Memory (Param7C:Param7B)=Param79(LSB):Param7A(MSB);; Gen_PM_CSUM	(1+0) Read every byte in program memory to calc check sum (0/0); Gen_BLPM_CSUM	(1+0) Read the ROM image and calc check sum (0/0);; WriteI2CToPM	(1+1) Copy from I2C to Prog Mem, Don't rewrite, Don't write 0x3FFF bytes (0/0); OpenPMImageFile	(1+2) Open the Prog Mem image file.; PM_LenToStop	(0)   Convert len to stop addr;; VerifyRICSum	(1+3) Verify the checksum of the rom image, W=0 noErr, W=0x80 FNF or bad csum;; ClrUIPBit	(1+1) Clr Update In Progress bit; UpdateProgMem	(1+4) Update the program memory.;;============================================================================================;============================================================================================;Set Update In Progress bit and file number;; Entry: W=file number 0..9; Exit: none; RAM used: Param78,Param79; Calls: (0+1) WriteEEP79W_D18;SetUIPBitW	ANDLW	0x0F	;parnoid!	MOVWF	Param78	MOVLW	ePM_Flags	MOVWF	Param79	SWAPF	Param78,W	;move file number to upper niddle	IORLW	PM_UIPMask	;set load bit	GOTO	WriteEEP79W_D18	;;============================================================================================;Set Update In Progress bit;; Entry: none; Exit: none; RAM used: Param78,Param79; Calls: (1+1) ReadEE79_D18, WriteEEP79W_D18;SetUIPBit	MOVLW	ePM_Flags	MOVWF	Param79	CALL	ReadEE79_D18	MOVWF	Param78	ANDLW	PM_UIPMask	SKPZ	RETURN;		MOVFW	Param78	IORLW	PM_UIPMask	GOTO	WriteEEP79W_D18;;============================================================================================; If the ePM_Flags,PM_UIP bit is set goto UpdateProgMem;; Entry: none; Exit: Does not exit if programming happens, UpdateProgMem; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C; Calls: (1+4) ReadEE79_D18,UpdateProgMem;PwrUpTest	MOVLW	ePM_Flags	;Is Update In Progress bit set?	MOVWF	Param79	CALL	ReadEE79_D18	MOVWF	Param77	ANDLW	PM_UIPMask	SKPNZ	RETURN		; No;	CALL	ClrUIPBit	;we get one shot at this	SWAPF	Param77,W	ANDLW	0x0F	;parnoid! only 0..9 are valid	MOVWF	PM_FileNum	;"b.b" or "bN.b"	if UsesLCD	CALL	lcd_GotoLine2_3	MOVLW	StrLoadRIPtr	CALL	PrintString_D18	endif	GOTO	UpdateProgMem;;============================================================================================; Read data from Program Memory Param79(LSB):Param7A(MSB)=(PM_Addr++);; Entry: none; Exit: PM_Addr++; RAM used: Param78,Param79,Param7A,Param7B,Param7C; Calls:(0) ReadPM, WritePM;ReadPM_PI	CLRF	Param78ReadPM_PI_E2	CALL	MovePMAddrToTemp;	CALL	BLIncAddr	BTFSC	Param78,0	GOTO	WritePM;; fall through to ReadPM;============================================================================================; Read data from Program Memory Param79(LSB):Param7A(MSB)=(Param7C:Param7B);; Entry: PM Addr in Param7C:Param7B; Exit: none; RAM used: Param79,Param7A,Param7B,Param7C; Calls: (0) None;ReadPM	mBank2	MOVFW	Param7B	;Write the	MOVWF	EEADR	;address bytes	MOVFW	Param7C	;for the desired	MOVWF	EEADRH	;address to read	BSF	_RP0	;Bank 3	BSF	EECON1,EEPGD	;Point to Program memory	BSF	EECON1,RD	;Start read operation	NOP		;Required two NOPs	NOP	BCF	_RP0	;Bank 2	MOVF	EEDATA,W	;Param79(LSB) = EEDATA	MOVWF	Param79	MOVF	EEDATH,W	;Param7A = EEDATH	MOVWF	Param7ABL_RTN_Bnk0	mBank0	RETURN;;============================================================================================BLIncAddr	INCF	PM_Addr_Lo,F	SKPNZ	INCF	PM_Addr_Hi,F	RETURN;============================================================================================; Write data to Program Memory (PM_Addr++)=Param79(LSB):Param7A(MSB); Disable interupts before calling "BCF	INTCON,GIE";; Entry: PM_Addr,Param79/A; Exit: PM_Addr++; RAM used: Param78,Param79,Param7A,Param7B,Param7C; Calls:(0) WritePM;WritePM_PI	BSF	Param78,0	GOTO	ReadPM_PI_E2;; fall through to WritePM;============================================================================================; Write data to Program Memory (Param7C:Param7B)=Param79(LSB):Param7A(MSB); Disable interupts before calling "BCF	INTCON,GIE";; Entry: PM Addr in Param7C:Param7B, Data in Param7A:Param79; Exit: none; RAM used: Param79,Param7A,Param7B,Param7C; Calls: (0) None;WritePM	mBank2	MOVF	Param7B,W	;Write address	MOVWF	EEADR	; of desired	MOVF	Param7C,W	; program memory	MOVWF	EEADRH	; location	MOVF	Param79,W	;Write value to	MOVWF	EEDATA	; program at	MOVF	Param7A,W	; desired memory	MOVWF	EEDATH	; location	BSF	_RP0	;Bank 3	BSF	EECON1,EEPGD	;Point to Program memory	BSF	EECON1,WREN	;Enable writes	MOVLW	0x55	;Write 55h to	MOVWF	EECON2	; EECON2	MOVLW	0xAA	;Write AAh to	MOVWF	EECON2	; EECON2	BSF	EECON1,WR	;Start write operation	NOP		;Two NOPs to allow micro	NOP		; to setup for write	BCF	EECON1,WREN	;Disable writes	GOTO	BL_RTN_Bnk0;;============================================================================================; Read every byte in program memory to calc check sum;; Entry: PM_Addr,PM_StopAddr; Exit: Param71:Param70=CSUM; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C; Calls: (1+0) ReadPM_PI or BL_i2c_read_ACK;Gen_PM_CSUM	CLRF	Param77Gen_PM_CSUM_E2	CLRF	Param70	CLRF	Param71;Gen_PM_CSUM_L1	BTFSS	Param77,0	CALL	ReadPM_PI	;Read PM_Value	BTFSS	Param77,0	GOTO	Gen_PM_CSUM_1;	CALL	BL_i2c_read_ACK	MOVWF	Param7A	CALL	BL_i2c_read_ACK	MOVWF	Param79	CALL	BLIncAddr;Gen_PM_CSUM_1	MOVFW	Param79	;CSUM+=PM_Value	ADDWF	Param70,F	SKPNC	INCF	Param71,F	MOVFW	Param7A	ADDWF	Param71,F;	MOVFW	PM_StopAddrH	SUBWF	PM_Addr_Hi,W	SKPZ	GOTO	Gen_PM_CSUM_L1	MOVFW	PM_StopAddrL	SUBWF	PM_Addr_Lo,W	SKPZ	GOTO	Gen_PM_CSUM_L1	GOTO	BL_RTN_Bnk0;;============================================================================================; Read the ROM image and calc check sum;; Entry: i2c file open ready to read first byte (0/0); Exit: Param71:Param70=CSUM; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C; Calls: (1+0) Gen_PM_CSUM_E2;Gen_BLPM_CSUM	BSF	Param77,0	GOTO	Gen_PM_CSUM_E2;;============================================================================================; Copy from I2C to Prog Mem, Don't rewrite, Don't write 0x3FFF bytes;; Entry: i2c file open ready to read first byte, PM_StopAddr=Last+1, PM_Addr=first address; Exit: none; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C; Calls: (1+1) BL_i2c_read_ACK, ReadPM, WritePM_PI;WriteI2CToPM	CALL	BL_i2c_read_ACK	;Get new word	MOVWF	PM_Data_Hi	CALL	BL_i2c_read_ACK	MOVWF	PM_Data_Lo	SUBLW	0x3F	;Test for unused word 0x3FFF	SKPZ	GOTO	WriteI2CToPM_1	INCF	PM_Data_Lo,W	SKPNZ	GOTO	WriteI2CToPM_Skp	;Skip this word;WriteI2CToPM_1	CALL	MovePMAddrToTemp;	CALL	ReadPM	;Get Current PM Param79/A	MOVFW	Param79	SUBWF	PM_Data_Lo,W	SKPZ	GOTO	WriteI2CToPM_Prog	MOVFW	Param7A	SUBWF	PM_Data_Hi,W	SKPNZ	GOTO	WriteI2CToPM_Skp;WriteI2CToPM_Prog	MOVFW	PM_Data_Lo	MOVWF	Param79	MOVFW	PM_Data_Hi	MOVWF	Param7A	CALL	WritePM_PI;WriteI2CToPM_2	MOVFW	PM_StopAddrH	SUBWF	PM_Addr_Hi,W	SKPZ	GOTO	WriteI2CToPM	MOVFW	PM_StopAddrL	SUBWF	PM_Addr_Lo,W	SKPZ	GOTO	WriteI2CToPM	RETURN;WriteI2CToPM_Skp	CALL	BLIncAddr	GOTO	WriteI2CToPM_2;;=========================================================================================;MovePMAddrToTemp	MOVFW	PM_Addr_Lo	MOVWF	Param7B	MOVFW	PM_Addr_Hi	MOVWF	Param7C	RETURN;;=========================================================================================; Read from external serial eeprom(s); Entry: Bank0, Read next byte send ACK; Exit: W = Return Value; RAM used: none; Calls:(0) none;BL_i2c_read_ACK	BCF	PIR1,SSPIF	; clear interrupt flag	BSF	STATUS,RP0	; Bank1	BSF	SSPCON2,RCEN	; enable receive mode	BCF	STATUS,RP0	; Bank0	BTFSS	PIR1,SSPIF	; has SSP received a data byte?	GOTO	$-1	; no, loop back to test	BSF	STATUS,RP0	; Bank1	BCF	SSPCON2,ACKDT	; ACK	BSF	SSPCON2,ACKEN	; send ACKDT bit;	BTFSC	SSPCON2,ACKEN	; has ACKDT bit been sent yet?	GOTO	$-1	; no, loop back to test	BCF	STATUS,RP0;	MOVF	SSPBUF,W	; save data to RAM	BSF	STATUS,RP0	; Bank1	BCF	SSPCON2,RCEN	; disable receive mode	BCF	STATUS,RP0	; Bank0	RETURN;============================================================================================; Open the Prog Mem image file and put the header info in ram.;; Entry: PM_FileNum; Exit: W=0=file is open, 0x80=FNF; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C; Calls: (1+2) ZeroFName_D18, find_file_D18, open_file_D18, BL_i2c_read_ACK;OpenPMImageFile	CALL	ZeroFName_D18	MOVLW	'b'	;Set filename = "bN.b"	CALL	DOP_Ram_D18	MOVFW	PM_FileNum	SKPNZ	GOTO	OpenPMImageFile_1	ADDLW	'0'	CALL	DOP_Ram_D18OpenPMImageFile_1	MOVLW	'.'	CALL	DOP_Ram_D18	MOVLW	'b'	CALL	DOP_Ram_D18;	CALL	find_file_D18	BTFSS	Param78,0	RETLW	0x80	;file not found	CALL	open_file_D18	CALL	BL_i2c_read_ACK	MOVWF	PM_Addr_Hi	;PM_Addr=Destination	CALL	BL_i2c_read_ACK	MOVWF	PM_Addr_Lo	CALL	BL_i2c_read_ACK	;PM_StopAddr=Length	MOVWF	PM_StopAddrH	CALL	BL_i2c_read_ACK	MOVWF	PM_StopAddrL	CALL	BL_i2c_read_ACK	;PM_CSum=Checksum	MOVWF	PM_CSumH	CALL	BL_i2c_read_ACK	MOVWF	PM_CSumL	RETLW	0x00;;============================================================================================; convert len to stop addr (0/0);; Entry: Bank0, PM_Addr, PM_StopAddr; Exit: PM_StopAddr; RAM used: none; Calls: (0) none;PM_LenToStop	MOVFW	PM_Addr_Lo		ADDWF	PM_StopAddrL,F	SKPNC	INCF	PM_StopAddrH,F	MOVFW	PM_Addr_Hi	ADDWF	PM_StopAddrH,F	RETURN;;============================================================================================; Verify the checksum of the rom image;; Entry: PM_FileNum; Exit: W=0 noErr, W=0x80 FNF or bad csum; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C; Calls: (1+3) OpenPMImageFile, PM_LenToStop, Gen_BLPM_CSUM, close_file_D18;;VerifyRICSum	CALL	OpenPMImageFile	IORLW	0x00	SKPZ	GOTO	VRICsErr	;file not found;	CALL	PM_LenToStop	CALL	Gen_BLPM_CSUM	;Param71:Param70=CSUM	CALL	close_file_D18;	MOVFW	Param70	SUBWF	PM_CSumL,W	SKPZ	RETLW	0x80	;Doesn't Match;	MOVFW	Param71	SUBWF	PM_CSumH,W	SKPZVRICsErr	RETLW	0x80	;Doesn't Match	RETLW	0x00	;It's GOOD!;;============================================================================================; Clr Update In Progress bit;; Entry: none; Exit: none; RAM used: Param78,Param79; Calls: (1+1) ReadEE79_D18, WriteEEP79W_D18;ClrUIPBit	MOVLW	ePM_Flags		MOVWF	Param79	CALL	ReadEE79_D18	ANDLW	PM_UIPMaskClr	GOTO	WriteEEP79W_D18;;============================================================================================; Update the program memory.;; Find then program memory image in eerom and verify its checksum.; Clear ePM_Flags,PM_UIP bit. If this bit is cleared at startup then this proccess was;  interupted and must be completed.; ;; Entry: PM_FileNum; Exit: Does not exit, GOTO 0x0000; RAM used: Param70,Param71,Param77,Param78,Param79,Param7A,Param7B,Param7C; Calls: (1+4) OpenPMImageFile,WriteI2CToPM,VerifyRICSum;UpdateProgMem	CALL	VerifyRICSum	IORLW	0x00	SKPZ		;skip if noErr	GOTO	CheckSumError	;rom image had bad csum;	CALL	SetUIPBit;	CALL	OpenPMImageFile	IORLW	0x00	SKPZ	GOTO	CheckSumError	;file not found;	CALL	PM_LenToStop;	BCF	_GIE	;disable interupts	if UseOldBL	else	BTFSC	_GIE	GOTO	$-2	endif;	CALL	WriteI2CToPM	CALL	close_file_D18;	CALL	ClrUIPBit;	CLRF	PCLATH	GOTO	0x0000;CheckSumError		if UsesLCD	CALL	lcd_GotoLine2_3	MOVLW	Str_ErrorPtr	CALL	PrintString_D18	endifCSumNoRtn	GOTO	CSumNoRtn;;============================================================================================;; End of Bootloader.asm;;