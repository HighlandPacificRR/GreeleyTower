	subtitle	"Brain Macros"	page;===================================================================================;;  FileName: BMacros.asm;  Date: 4/5/2008;  File Version: 1.3.1;  ;  Author: David M. Flynn;  Company: Oxford V.U.E., Inc.;;============================================================================================; Notes:;;  These are generic macros for the Brain computer;;============================================================================================; Revision History;; 1.3.1  4/5/2008	Added UsesVUE8LEDs; 1.3    4/28/04	Added mBankISel; 1.2.4  5/19/03	Added BNE, BEQ; 1.2.3  5/16/03	Added CMP, BMI and BPL.; 1.2.2  4/23/03	Changed LCALL to be just CALL when same segment.; 1.2.1  4/15/03	Added SKPB, SKPNB; 1.2    2/26/03	Added Instruction set extentions for 14 bit core (16F###) (27 of them); 1.1    2/21/03	Added mLED_On, mLED_Off, mPCLGoto;	Added 18F452 version of mCall#To#; 1.0.1  2/12/03	Fixed mCallxTox so a return from a segment other than the one;	called will not cause PCLATH,3/PCLATH,4 problems.; 1.0    10/1/02	Moved macros to this file;;============================================================================================; Conditionals	Constant	Using18F452=0	;Set to 0 for 16F877	ifndef UsesVUE8LEDs	constant UsesVUE8LEDs=0	endif;;============================================================================================; Name	(additional stack words required), (Return Bank) Description;============================================================================================;TestTimerIsZero	(0),(0) pass Timer1Lo,Timer2Lo, etc. returns STATUS,Z set if zero;;mLED_On	(0) Macro. Macro for turning LEDs ON. exits w/ bank0 Selected;mLED_Off	(0) Macro. Macro for turning LEDs OFF. exits w/ bank0 Selected;mLED1_ON	(0),(0) LED macro;mLED1_OFF	(0),(0) LED macro;mLED2_ON	(0),(0) LED macro;mLED2_OFF	(0),(0) LED macro;mLED3_ON	(0),(0) LED macro;mLED3_OFF	(0),(0) LED macro;mLED4_ON	(0),(0) LED macro;mLED4_OFF	(0),(0) LED macro;mLED5_ON	(0),(0) LED macro;mLED5_OFF	(0),(0) LED macro;mLED6_ON	(0),(0) LED macro;mLED6_OFF	(0),(0) LED macro;;mBank0	(0),(0) Macro to set STATUS,RP0 and RP1 bits for ram access to bank0;mBank1	(0),(1) Macro to set STATUS,RP0 and RP1 bits for ram access to bank1;mBank2	(0),(2) Macro to set STATUS,RP0 and RP1 bits for ram access to bank2;mBank3	(0),(3) Macro to set STATUS,RP0 and RP1 bits for ram access to bank3;;mCall0To1	(1+n),(n/a) used to set/clr PCLATH bits;mCall0To2	(1+n),(n/a) used to set/clr PCLATH bits;mCall0To3	(1+n),(n/a) used to set/clr PCLATH bits;;mCall1To0	(1+n),(n/a) used to set/clr PCLATH bits;mCall1To2	(1+n),(n/a) used to set/clr PCLATH bits;mCall1To3	(1+n),(n/a) used to set/clr PCLATH bits;;mCall2To0	(1+n),(n/a) used to set/clr PCLATH bits;mCall2To1	(1+n),(n/a) used to set/clr PCLATH bits;mCall2To3	(1+n),(n/a) used to set/clr PCLATH bits;;mCall3To0	(1+n),(n/a) used to set/clr PCLATH bits;mCall3To1	(1+n),(n/a) used to set/clr PCLATH bits;mCall3To2	(1+n),(n/a) used to set/clr PCLATH bits;;mReadData	(0),(0) Read Data macro, arg1 is the select value (Select0,SelectSRAM, etc.);mWriteData	(0),(0) Write Data macro, Data is the location of the Data (Param71, etc.);mSet8bitAddr	(0),(0) Set the low 8 address bits to the value in the W;mPCLGoto	(0),(n/a) Set PCLATH:0..2 then add W to PCL;mBankISel	(0),(n/a) Set Status,IRP bit corect for the operand passed.;;===================================================================; Instruction set extentions for 14 bit core (16F###);; opcode	operand	description;---------------------------------------------------------------;ADDCF	f,d	Add Carry to File;ADDDCF	f,d	Add Digit Carry to File;BC	k	Branch on Carry;BDC	k	Branch on Digit Carry;BEQ	k	Branch on Equal to Zero aka BZ;BMI	k	Branch on W minus (bit 7 set) (W bits 0..6 are zerroed);BNC	k	Branch on No Carry;BNDC	k	Branch on No Digit Carry;BNE	k	Branch on Not Equal to Zero aka BNZ;BNZ	k	Branch on No Zero;BPL	k	Branch on W plus (bit 7 clr) (W bits 0..6 are zerroed);BZ	k	Branch on Zero;CLRC		Clear Carry;CLRDC		Clear Digit Carry;CLRZ		Clear Zero flag;CMP	f	Compare F to W (F-W);LCALL	k	Long Call;LGOTO	k	Long GOTO;MOVFW	f	Move File to W;NEGF	f,d	Negate File;SETC		Set Carry;SETDC		Set Digit Carry;SETZ		Set Zero;SKPB		Skip on Borrow;SKPC		Skip on Carry;SKPDC		Skip on Digit Carry;SKPNB		Skip on Not Borrow;SKPNC		Skip on No Carry;SKPNDC		Skip on No Digit Carry;SKPNZ		Skip on Not Zero;SKPZ		Skip on Zero;SUBBF	f,d	Subtract Borrow from File (used after SUBWF);SUBCF	f,d	Subtract Carry from File;SUBDCF	f,d	Subtract Digit Carry from File;TSTF	f	Test File;;======================================================================================; pass Timer1Lo,Timer2Lo, etc.; returns STATUS,Z set if zero;TestTimerIsZero	macro	T_Number	BSF	STATUS,RP0	;Bank3	BSF	STATUS,RP1	MOVF	T_Number,W	IORWF	T_Number+1,W	BCF	STATUS,RP0	;Bank0	BCF	STATUS,RP1	endm	;;=================================================================================; LED macros;=================================================================================; Macro for turning LEDs ONmLED_On	macro	LED_Num	BSF	STATUS,RP1	BSF	STATUS,RP0	; Bank3	BCF	CMD_LDO_0,LED_Num	BCF	STATUS,RP1	BCF	STATUS,RP0	; Bank0	endm;;=================================================================================; Macro for turning LEDs OFFmLED_Off	macro	LED_Num	BSF	STATUS,RP1	BSF	STATUS,RP0	; Bank3	BSF	CMD_LDO_0,LED_Num	BCF	STATUS,RP1	BCF	STATUS,RP0	; Bank0	endm;;mLED1_ON	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BCF	CMD_LDO_0,LED1	if UsesVUE8LEDs	BCF	CMD_LDO_2,LED1A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;mLED1_OFF	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BSF	CMD_LDO_0,LED1	if UsesVUE8LEDs	BSF	CMD_LDO_2,LED1A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;mLED2_ON	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BCF	CMD_LDO_0,LED2	if UsesVUE8LEDs	BCF	CMD_LDO_2,LED2A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;mLED2_OFF	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BSF	CMD_LDO_0,LED2	if UsesVUE8LEDs	BSF	CMD_LDO_2,LED2A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;mLED3_ON	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BCF	CMD_LDO_0,LED3	if UsesVUE8LEDs	BCF	CMD_LDO_2,LED3A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;mLED3_OFF	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BSF	CMD_LDO_0,LED3	if UsesVUE8LEDs	BSF	CMD_LDO_2,LED3A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;mLED4_ON	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BCF	CMD_LDO_0,LED4	if UsesVUE8LEDs	BCF	CMD_LDO_2,LED4A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;mLED4_OFF	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BSF	CMD_LDO_0,LED4	if UsesVUE8LEDs	BSF	CMD_LDO_2,LED4A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;mLED5_ON	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BCF	CMD_LDO_0,LED5	if UsesVUE8LEDs	BCF	CMD_LDO_2,LED5A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;mLED5_OFF	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BSF	CMD_LDO_0,LED5	if UsesVUE8LEDs	BSF	CMD_LDO_2,LED5A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;mLED6_ON	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BCF	CMD_LDO_0,LED6	if UsesVUE8LEDs	BCF	CMD_LDO_2,LED6A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;mLED6_OFF	macro	BSF	STATUS,RP1	BSF	STATUS,RP0	BSF	CMD_LDO_0,LED6	if UsesVUE8LEDs	BSF	CMD_LDO_2,LED6A	endif	BCF	STATUS,RP1	BCF	STATUS,RP0	endm;;=================================================================================; Macros to setup RP0/RP1mBank0	macro	BCF	STATUS,RP0	BCF	STATUS,RP1	endm;mBank0	macro	BCF	STATUS,RP0	BCF	STATUS,RP1	endm;mBank1	macro	BSF	STATUS,RP0	BCF	STATUS,RP1	endm;mBank2	macro	BCF	STATUS,RP0	BSF	STATUS,RP1	endm;mBank3	macro	BSF	STATUS,RP0	BSF	STATUS,RP1	endm;	if Using18F452;=================================================================================; Call macros, use only when stack space is short 18F452 version;;Call from segment 0 to segment 1;mCall0To1	macro	Destination	CALL	Destination	endm;;Call from segment 0 to segment 2;mCall0To2	macro	Destination	CALL	Destination	endm;;Call from segment 0 to segment 3;mCall0To3	macro	Destination	CALL	Destination	endm;;Call from segment 1 to segment 0;mCall1To0	macro	Destination	CALL	Destination	endm;;Call from segment 1 to segment 2;mCall1To2	macro	Destination	CALL	Destination	endm;;Call from segment 1 to segment 3;mCall1To3	macro	Destination	CALL	Destination	endm;;Call from segment 2 to segment 0;mCall2To0	macro	Destination	CALL	Destination	endm;;Call from segment 2 to segment 1;mCall2To1	macro	Destination	CALL	Destination	endm;;Call from segment 2 to segment 3;mCall2To3	macro	Destination	CALL	Destination	endm;;Call from segment 3 to segment 0;mCall3To0	macro	Destination	CALL	Destination	endm;;Call from segment 3 to segment 1;mCall3To1	macro	Destination	CALL	Destination	endm;;Call from segment 3 to segment 2;mCall3To2	macro	Destination	CALL	Destination	endm;;		else;=================================================================================; Call macros, use only when stack space is short 16F877 version;;Call from segment 0 to segment 1;	if oldCodemCall0To1	macro	Destination	BSF	PCLATH,3	CALL	Destination	BCF	PCLATH,3	BCF	PCLATH,4	endm;;Call from segment 0 to segment 2;mCall0To2	macro	Destination	BSF	PCLATH,4	CALL	Destination	BCF	PCLATH,3	BCF	PCLATH,4	endm;;Call from segment 0 to segment 3;mCall0To3	macro	Destination	BSF	PCLATH,3	BSF	PCLATH,4	CALL	Destination	BCF	PCLATH,4	BCF	PCLATH,3	endm;	endif;mCall0To1	macro	Destination	BSF	PCLATH,3	CALL	Destination	CLRF	PCLATH	endm;;Call from segment 0 to segment 2;mCall0To2	macro	Destination	BSF	PCLATH,4	CALL	Destination	CLRF	PCLATH	endm;;Call from segment 0 to segment 3;mCall0To3	macro	Destination	BSF	PCLATH,3	BSF	PCLATH,4	CALL	Destination	CLRF	PCLATH	endm;;Call from segment 1 to segment 0;mCall1To0	macro	Destination	BCF	PCLATH,3	CALL	Destination	BSF	PCLATH,3	BCF	PCLATH,4	endm;;Call from segment 1 to segment 2;mCall1To2	macro	Destination	BSF	PCLATH,4	BCF	PCLATH,3	CALL	Destination	BCF	PCLATH,4	BSF	PCLATH,3	endm;;Call from segment 1 to segment 3;mCall1To3	macro	Destination	BSF	PCLATH,4	CALL	Destination	BSF	PCLATH,3	BCF	PCLATH,4	endm;;Call from segment 2 to segment 0;mCall2To0	macro	Destination	BCF	PCLATH,4	CALL	Destination	BCF	PCLATH,3	BSF	PCLATH,4	endm;;Call from segment 2 to segment 1;mCall2To1	macro	Destination	BSF	PCLATH,3	BCF	PCLATH,4	CALL	Destination	BCF	PCLATH,3	BSF	PCLATH,4	endm;;Call from segment 2 to segment 3;mCall2To3	macro	Destination	BSF	PCLATH,3	CALL	Destination	BCF	PCLATH,3	BSF	PCLATH,4	endm;;Call from segment 3 to segment 0;mCall3To0	macro	Destination	BCF	PCLATH,3	BCF	PCLATH,4	CALL	Destination	BSF	PCLATH,3	BSF	PCLATH,4	endm;;Call from segment 3 to segment 1;mCall3To1	macro	Destination	BCF	PCLATH,4	CALL	Destination	BSF	PCLATH,3	BSF	PCLATH,4	endm;;Call from segment 3 to segment 2;mCall3To2	macro	Destination	BCF	PCLATH,3	CALL	Destination	BSF	PCLATH,3	BSF	PCLATH,4	endm;	endif;=================================================================================; Read Data macro;;  Note: Address Enable ON, IORead ON, Get Data, IORead OFF, Address Enable OFF; arg1 is the select value (Select0,SelectSRAM, etc.); Entry: None; Exit: W = data from port; Ram used:none; Calls: (0) nonemReadData	macro	arg1	BSF	STATUS,RP0	;Bank1	BCF	STATUS,RP1	MOVLW	All_In	MOVWF	TRISD	BCF	STATUS,RP0	;Bank0	MOVF	PORTB,W	ANDLW	AddressMask	IORLW	arg1	MOVWF	PORTB	BCF	PORTB,SelectEnable	BCF	PORTB,IORead	NOP		;wait 200nS	MOVF	PORTD,W	BSF	PORTB,IORead	BSF	PORTB,SelectEnable	endm	;;=================================================================================; Write Data macro;;  Note: Address Enable ON, IOWrite ON, IOWrite OFF, Address Enable OFF; arg1 is the select value (Select0,SelectSRAM, etc.); Data is the location of the Data (Param71, etc.);; Entry: Data=Data, TRISD must be All_Out, Bank 0 must be delected, Data must be in bank 0; Exit: none; Ram used:"Data"; Calls: (0) none;mWriteData	macro	arg1,Data	MOVF	Data,W	MOVWF	PORTD;	MOVF	PORTB,W	ANDLW	AddressMask	IORLW	arg1	MOVWF	PORTB	BCF	PORTB,SelectEnable	BCF	PORTB,IOWrite	BSF	PORTB,IOWrite		BSF	PORTB,SelectEnable	endm;;=================================================================================; Set the low 8 address bits to the value in the W;; Entry: W= and 8 bit address, any bank OK; Exit: CurrentAddr0 is changed, Bank 0 selected; RAM used:none; Calls:(0) none;mSet8bitAddr	macro	BCF	STATUS,RP1	BCF	STATUS,RP0	;Bank0	MOVWF	PORTD	BSF	STATUS,RP1	;Bank3	BSF	STATUS,RP0	MOVWF	CurrentAddr0	BCF	STATUS,RP1	;Bank1	MOVLW	All_Out	MOVWF	TRISD	BCF	STATUS,RP0	;Bank0	MOVF	PORTB,W	ANDLW	AddressMask	IORLW	Select0	MOVWF	PORTB	BCF	PORTB,SelectEnable	BSF	PORTB,SelectEnable	endm;;=================================================================================; Set PCLATH:0..2 then add W to PCL; CAUTION:The first BSF/BCF instruction and the location of the ;  last branched to instruction must be in the same page;; Entry: W= and 8 bit offset for PCL; Exit: branches forward W locations; RAM used:none; Calls:(0) none;mPCLGoto	macro		if $ & 0x0100	BSF	PCLATH,0	else	BCF	PCLATH,0	endif	if $ & 0x0200	BSF	PCLATH,1	else	BCF	PCLATH,1	endif	if $ & 0x0400	BSF	PCLATH,2	else	BCF	PCLATH,2	endif;	ADDWF	PCL,F	endm;;=======================================================================================;Set Status,IRP bit corect for the operand passed;mBankISel	macro	dest	if dest & 0x0100	BSF	STATUS,IRP	else	BCF	STATUS,IRP	endif	endm;;=======================================================================================; Instruction set extentions for 14 bit core (16F###);=======================================================================================; Add Carry to File;ADDCF	macro	dest,W_or_F	BTFSC	STATUS,C	INCF	dest,W_or_F	endm;;==============================================================; Add Digit Carry to File;ADDDCF	macro	dest,W_or_F	BTFSC	STATUS,DC	INCF	dest,W_or_F	endm;;==============================================================; Branch on Carry;BC	macro	dest	BTFSC	STATUS,C	GOTO	dest	endm;;==============================================================; Branch on Digit Carry;BDC	macro	dest	BTFSC	STATUS,DC	GOTO	dest	endm;;==============================================================; Branch on Equal to Zero aka BZ;BEQ	macro	dest	BTFSC	STATUS,Z	GOTO	dest	endm;;==============================================================; Branch on W minus (bit 7 set) (W bits 0..6 are zerroed);BMI	macro	dest	ANDLW	0x80	BTFSC	STATUS,Z	;skip if Z	GOTO	dest	endm;;==============================================================; Branch on No Carry;BNC	macro	dest	BTFSS	STATUS,C	GOTO	dest	endm;;==============================================================; Branch on No Digit Carry;BNDC	macro	dest	BTFSS	STATUS,DC	GOTO	dest	endm;;==============================================================; Branch on Not Equal to Zero aka BNZ;BNE	macro	dest	BTFSS	STATUS,Z	GOTO	dest	endm;;==============================================================; Branch on No Zero;BNZ	macro	dest	BTFSS	STATUS,Z	GOTO	dest	endm;;==============================================================; Branch on W plus (bit 7 clr) (W bits 0..6 are zerroed);BPL	macro	dest	ANDLW	0x80	BTFSS	STATUS,Z	;skip if not Z	GOTO	dest	endm;;==============================================================; Branch on Zero;BZ	macro	dest	BTFSC	STATUS,Z	GOTO	dest	endm;;==============================================================; Clear Carry;CLRC	macro	BCF	STATUS,C	endm;;==============================================================; Clear Digit Carry;CLRDC	macro	BCF	STATUS,DC	endm;;==============================================================; Clear Zero flag;CLRZ	macro	BCF	STATUS,Z	endm;;==============================================================; Compare F to W (F-W);CMP	macro	f	SUBWF	f,W	endm;;==============================================================; Long Call;LCALL	macro	dest	if ($ & 0x0800) <> (dest & 0x0800)	if dest & 0x0800	BSF	PCLATH,3	else	BCF	PCLATH,3	endif	endif			if ($ & 0x1000) <> (dest & 0x1000)	if dest & 0x1000	BSF	PCLATH,4	else	BCF	PCLATH,4	endif	endif		CALL	dest	if (($ & 0x0800) <> (dest & 0x0800)) | (($ & 0x1000) <> (dest & 0x1000))	if $ & 0x0800	BSF	PCLATH,3	else	BCF	PCLATH,3	endif		if $ & 0x1000	BSF	PCLATH,4	else	BCF	PCLATH,4	endif	endif	endm;;==============================================================; Long GOTO;LGOTO	macro	dest	if ($ & 0x0800) <> (dest & 0x0800)	if dest & 0x0800	BSF	PCLATH,3	else	BCF	PCLATH,3	endif	endif			if ($ & 0x1000) <> (dest & 0x1000)	if dest & 0x1000	BSF	PCLATH,4	else	BCF	PCLATH,4	endif	endif		GOTO	dest	endm;;==============================================================; Move File to W;MOVFW	macro	src	MOVF	src,W	endm;;==============================================================; Negate File;NEGF	macro	dest,W_or_F	COMF	dest,F	INCF	dest,W_or_F	endm;;==============================================================; Set Carry;SETC	macro	BSF	STATUS,C	endm;;==============================================================; Set Digit Carry;SETDC	macro	BSF	STATUS,DC	endm;;==============================================================; Set Zero;SETZ	macro	BSF	STATUS,Z	endm;;==============================================================; Skip on Borrow;SKPB	macro	BTFSC	STATUS,C	endm;;==============================================================; Skip on Carry;SKPC	macro	BTFSS	STATUS,C	endm;;==============================================================; Skip on Digit Carry;SKPDC	macro	BTFSS	STATUS,DC	endm;;==============================================================; Skip on Not Borrow;SKPNB	macro	BTFSS	STATUS,C	endm;;==============================================================; Skip on No Carry;SKPNC	macro	BTFSC	STATUS,C	endm;;==============================================================; Skip on No Digit Carry;SKPNDC	macro	BTFSC	STATUS,DC	endm;;==============================================================; Skip on Not Zero;SKPNZ	macro	BTFSC	STATUS,Z	endm;;==============================================================; Skip on Zero;SKPZ	macro	BTFSS	STATUS,Z	endm;;==============================================================; Subtract Borrow from File;SUBBF	macro	dest,W_or_F	BTFSS	STATUS,C	DECF	dest,W_or_F	endm;;==============================================================; Subtract Carry from File;SUBCF	macro	dest,W_or_F	BTFSC	STATUS,C	DECF	dest,W_or_F	endm;;==============================================================; Subtract Digit Carry from File;SUBDCF	macro	dest,W_or_F	BTFSC	STATUS,DC	DECF	dest,W_or_F	endm;;==============================================================; Test File;TSTF	macro	src	MOVF	src,F	endm;;;;;;;;;;;;;;;;;;;;;;;