	subtitle	"Main.asm"	page;============================================================================================;;  FileName: Main.asm;  Date: 2/9/2013;  File Version: 1.0.1;  ;  Author: David M. Flynn;  Company: HPRR;  Project: TCC;;============================================================================================; Notes:;  This file is common to all TCC computers.;  It calls SetupDMFEIO at startup, and DoDMFEIO each pass through the event loop.;;============================================================================================; Revision History;; 1.0.1 2/9/2013	Changed "Call DoDMFEIO" to GOTO and DoDMFEIO_RTN; 1.0   9/6/2004	First Reved version.;;============================================================================================	ORG	0x1000;; IP addresses of CPU'sUDP_RxIP_HIGY	EQU	d'124'	;Highland/Greeley PanelUDP_RxIP_Tcc	EQU	d'125'	;TCC DisplayUDP_RxIP_Sig	EQU	d'126'	;SignalsUDP_RxIP_MP	EQU	d'127'	;Main Panel, This is me;IP 128 in not usedUDP_RxIP_BPKB	EQU	d'129'	;Block power keyboardUDP_RxIP_CT	EQU	d'130'	;Casper TowerUDP_RxIP_VW	EQU	d'131'	;Vista and Westend YardsUDP_RxIP_OT	EQU	d'132'	;Overview TowerUDP_RxIP_C1	EQU	d'133'	;CAB 1UDP_RxIP_C2	EQU	d'134'	;CAB 2UDP_RxIP_C3	EQU	d'135'	;CAB 3UDP_RxIP_C4	EQU	d'136'	;CAB 4UDP_RxIP_C5	EQU	d'137'	;CAB 5UDP_RxIP_AT	EQU	d'138'	;Arcadia TowerUDP_RxIP_BT	EQU	d'139'	;Baker TowerUDP_RxIP_DT	EQU	d'140'	;Dawson TowerUDP_RxIP_BV	EQU	d'141'	;Bayshore Valley Traction Co.UDP_RxIP_DM	EQU	d'142'	;Delmar Passenger Terminal;kUDP_DataType_LoSM	EQU	0x01kUDP_DataType_HiSM	EQU	0x02kUDP_DataType_BkPwr	EQU	0x03kUDP_DataType_BkOcc	EQU	0x04kUDP_DataType_BlkCmd	EQU	0x05kUDP_DataType_BkPwr2	EQU	0x06kUDP_DataType_BlkCmd2	EQU	0x07kUDP_DataType_IN	EQU	0x08	;Signal System Inputs (optical block detectors, etc);;; Name	(additional stack words required) Description;================================================================================================;calls outside this segment;Disp_decbyteW_D10	(1+1+2);lcd_gotoxy_D10	(1+1+0) Go to an X-Y position on the display, top left is 0, 0 (W,Param78);PrintString_D10	(1+1+2);Disp_Hex_Byte_D10	(1+1+2) (testing only);DisplaysW_D10	(1+1+1);;=============================================================================;segment 2 routines;;Main	(1+4) Program entry point;  MainLoop;  InitSvsMode;    TestSW2;    TestSW3;    TestSW4;  MainLoop_IP;;DispStrLine1;DispIP;;OnTheTick	(1+0) Routines that run once every 1/20th of a second;  StopWater;  StartWater;  StartSpent;  StopSpent;  AutoFillStop;  UpdatePnlCount;;ClearRam	(1+0) Clear all RAM;;WritePwrUpRec;OnTheHalfSecond	Routines that run once every 1/2 of a second;SetSRAM_evWater	(0) Set the SRAM address for access to the next byte in the Water event record;SetupOldPulses	(0) The pulse counters come up random so preload old pulses to avoid an error;;=============================================================================;;Dispatch routines (this is segment 2);;segment 0;	if UsesLCD;Disp_decbyteW_D10	mCall2To0	Disp_decbyteW;	RETURN;Disp_decword_D10	mCall2To0	Disp_decword	RETURN;lcd_GotoLine3	MOVLW	0x03	GOTO	lcd_GotoLineW_D10lcd_GotoLine2	MOVLW	0x02	GOTO	lcd_GotoLineW_D10lcd_GotoLine1	MOVLW	0x01	GOTO	lcd_GotoLineW_D10lcd_GotoLine0	CLRW;lcd_GotoLineW_D10	mCall2To0	lcd_GotoLineW	RETURN;lcd_gotoxy_D10	mCall2To0	lcd_gotoxy	;top left is 0,0 (W,Param78)	RETURN;PrintString_D10	mCall2To0	PrintString	RETURN;Disp_Hex_Byte_D10	mCall2To0	Disp_Hex_Byte	RETURN;;;Disp_Dot	MOVLW	'.';	GOTO	DisplaysW_D10Disp_Space	MOVLW	' '	GOTO	DisplaysW_D10Disp_Colon	MOVLW	':'DisplaysW_D10	mCall2To0	DisplaysW	RETURN	endif		;if UsesLCD;	if UsesDataLoggingEraseEEROM_D10	mCall2To0	EraseEEROM	RETURN	endif;;ReadEEROM_D10	mCall2To0	ReadEEROM;	RETURN;;WriteEEROM_D10	mCall2To0	WriteEEROM;	RETURN;WriteEEP79W_D10	mCall2To0	WriteEEP79W	RETURN;SRAM_Read_D10	mCall2To0	SRAM_Read	RETURN;;SRAM_NextAddr_D10	mCall2To0	SRAM_NextAddr;	RETURN;;Delay1Sec_D10	mCall2To0	Delay1Sec;	RETURN;DelayWmS_D10	mCall2To0	DelayWmS	RETURN;;DelayWuS_D10	mCall2To0	DelayWuS;	RETURN;;WriteLDO_0_D10	mCall2To0	WriteLDO_0;	RETURN;;WriteLDO_1_D10	mCall2To0	WriteLDO_1;	RETURN;ReadEEwW_D10	mCall2To0	ReadEEwW	RETURN;DispIP_D10	mCall2To0	DispIP	RETURN;;DispIP_E2_D10	mCall2To0	DispIP_E2;	RETURN;;DispMAC_D10	mCall2To0	DispMAC;	RETURN;;DispMAC_E2_D10	mCall2To0	DispMAC_E2;	RETURN;;Disp_decbyteW2pl_D10	mCall2To0	Disp_decbyteW2pl;	RETURN;SRAM_ReadPI_D10	mCall2To0	SRAM_ReadPI	RETURN;SRAM_WritePI_D10	mCall2To0	SRAM_WritePI	RETURN;SRAM_Write_D10	mCall2To0	SRAM_Write	RETURN;SRAM_ReadDR_D10	mCall2To0	SRAM_ReadDR	RETURN;;Disp_decbyteW3pl_D10	mCall2To0	Disp_decbyteW3pl;	RETURN;ReadEE79_D10	mCall2To0	ReadEE79	RETURN;;write_nonvol_D10	mCall2To0	write_nonvol;	RETURN;	if UsesSeg0DataAccessGetBlkOwnerX_D10	mCall2To0	GetBlkOwnerX	RETURN	if UsesGetCabNumXGetCabNumX_D10	mCall2To0	GetCabNumX	RETURN	endifGetSMTableHighX_D10	mCall2To0	GetSMTableHighX	RETURNGetGet_1X_D10	mCall2To0	GetGet_1X	RETURNGetGet_Read_D10	mCall2To0	GetGet_Read	RETURNSetSMTableHighX_D10	mCall2To0	SetSMTableHighX	RETURNGetCurBlkY_D10	mCall2To0	GetCurBlkY	RETURNGetSMDispPtrY_D10	mCall2To0	GetSMDispPtrY	RETURNGetBlockCmdTableX_D10	mCall2To0	GetBlockCmdTableX	RETURNSetBlockCmdTableX_D10	mCall2To0	SetBlockCmdTableX	RETURNGetBlockCmdTable2X_D10	mCall2To0	GetBlockCmdTable2X	RETURNSetBlockCmdTable2X_D10	mCall2To0	SetBlockCmdTable2X	RETURNGetBlockPwrTableX_D10	mCall2To0	GetBlockPwrTableX	RETURNSetBlockPwrTableX_D10	mCall2To0	SetBlockPwrTableX	RETURNSetSet_1X_D10	mCall2To0	SetSet_1X	RETURNGetBlockPwrTable2X_D10	mCall2To0	GetBlockPwrTable2X	RETURNSetBlockPwrTable2X_D10	mCall2To0	SetBlockPwrTable2X	RETURNGetSMTableX_D10	mCall2To0	GetSMTableX	RETURNSetSMTableX_D10	mCall2To0	SetSMTableX	RETURN	elseGetBlkOwnerX_D10	GOTO	GetBlkOwnerX	if UsesGetCabNumXGetCabNumX_D10	GOTO	GetCabNumX	endifGetSMTableHighX_D10	GOTO	GetSMTableHighXGetGet_1X_D10	GOTO	GetGet_1XGetGet_Read_D10	GOTO	GetGet_ReadSetSMTableHighX_D10	GOTO	SetSMTableHighXGetCurBlkY_D10	GOTO	GetCurBlkYGetSMDispPtrY_D10	GOTO	GetSMDispPtrYGetBlockCmdTableX_D10	GOTO	GetBlockCmdTableXSetBlockCmdTableX_D10	GOTO	SetBlockCmdTableXGetBlockCmdTable2X_D10	GOTO	GetBlockCmdTable2XSetBlockCmdTable2X_D10	GOTO	SetBlockCmdTable2XGetBlockPwrTableX_D10	GOTO	GetBlockPwrTableX	SetBlockPwrTableX_D10	GOTO	SetBlockPwrTableX	SetSet_1X_D10	GOTO	SetSet_1XGetBlockPwrTable2X_D10	GOTO	GetBlockPwrTable2XSetBlockPwrTable2X_D10	GOTO	SetBlockPwrTable2XGetSMTableX_D10	GOTO	GetSMTableXSetSMTableX_D10	GOTO	SetSMTableX	endif;;=================================================================================================; Definitions for filesystem; ; The filesystem is in 1 or 2 ROMs (32k bytes each). At the start of the first ROM is a ; directory of 1 or more filename blocks, each of which have pointers to ; data blocks. The end of the directory is marked by a dummy length of FFFFh ; ; All the files include the appropriate HTTP headers. ; ; ; Filename block structure; WORD len;	Length of file in bytes; WORD start;	Start address of file data in ROM; WORD check;	TCP checksum of file; BYTE flags;	Embedded Gateway Interface (EGI) flags; char name[ROM_FNAMELEN]; Lower-case filename with extension; 	;;====================================================================================;====================================================================================; Entry: none; Exit: doesn't; RAM used:; Calls:(1+4) StandardInits, read_nonvol, ;	user_config, init_ether, Disp_decbyteW_D10, scan_io,;	get_ether, lcd_gotoxy, arp_recv, ip_recv;Main	mCall2To0	StandardInits;	mCall2To0	SetupDataROM;;; while (!read_nonvol() || !USER_BUTTON)  If csum error, or button InitDoOver	mCall2To0	read_nonvol	;myeth4, myeth5, myip;	MOVF	Param78,F	;1=ok	SKPZ	GOTO	GoForEther	;MAC address ok and not button;;Error!  No MAC addressNoMACError	CALL	write_nonvol_D10;	GOTO	InitDoOver	;loop until we have a MAC address;GoForEther	mCall2To1	init_ether	;Init Ethernet ;;;;	mCall2To3	SetupDMFEIO	mBank0	BSF	DispLSpaces	CALL	StartRunMode;	if StartupInSvsMode	BSF	ServiceMode	CALL	StartSvsMode	endif;=================================================================================================;=================================================================================================;;        Main loop...;;=================================================================================================;MainLoop	mCall2To0	scan_io	; Scan I/O, check timer;;---------------------------------------------------------------;User Button Command Intrerpeter;	CALL	ButtonDispatch	BCF	PCLATH,3	;ButtonDispatch may return	BSF	PCLATH,4	; from a long goto;;=========================================================================================================;=========================================================================================================;; Look for incoming ethernet frames;; if (get_ether())  Get Ethernet frame.. 	mCall2To1	get_ether;;=========================================================================================================;	GOTO	DoDMFEIODoDMFEIO_RTN;	BSF	PCLATH,3	BSF	PCLATH,4	GOTO	Do_UDP_DataXmitDo_UDP_DataXmit_Rtn;=========================================================================================================;	GOTO	MainLoop;;====================================================================================================;============================================================================================; Displays the string # in W on line 0DispStrLine0	MOVWF	Param75	CLRW		; goto(0,0)	GOTO	DispStrLineN;;====================================; Displays the string # in W on line 1DispStrLine1	MOVWF	Param75	MOVLW	0x01	; goto(0,1)	GOTO	DispStrLineN;;====================================; Displays the string # in W on line 2DispStrLine2	MOVWF	Param75	MOVLW	0x02	; goto(0,2)	GOTO	DispStrLineN;;====================================; Displays the string # in W on line 3DispStrLine3	MOVWF	Param75	MOVLW	0x03	; goto(0,3);DispStrLineN	CALL	lcd_GotoLineW_D10	MOVF	Param75,W	GOTO	PrintString_D10;DoErrorDisplayMainB0Rtn	mBank0	RETURN;====================================================================================================;ShowRunScrn00	GOTO	MainB0Rtn;;====================================================================================================; Routines that run once every 1/20th of a second; Entry: none; Exit: none; RAM used: ; Calls: ;OnTheTick 	mBank3	MOVF	BeepTimer,F	SKPZ	DECF	BeepTimer,F;	MOVF	BtnDeBounceTimer,F	SKPZ	DECF	BtnDeBounceTimer,F	GOTO	MainB0Rtn;;=============================================================================================;Routines that run once every 1/2 of a second;;OnTheHalfSecond	BSF	PCLATH,3	GOTO	HPRROnTheHalfHPRROnTheHalf_RTN	GOTO	DispIdleDispatch;;=============================================================================================;;=============================================================================================; end of Main.asm;;;;;;;;;;;;;