	subtitle	"Ether.asm"	page;===========================================================================================;;  FileName: Ether.asm (HPRR version);  Date: 9/17/02;  File Version: 1.0.2;  ;  Author: David M. Flynn;  Company: Oxford V.U.E., Inc.;;============================================================================================; Notes:;;  This file is handler routines for IP and TCP;;============================================================================================; Revision History;; 1.0.2     12/20/02   Deleted all Resist.asm stuff.;	Moved Div16 routines to LowStuff.asm; 1.0.1     9/17/02	Fisrt rev'd version;;============================================================================================; Conditionals;;============================================================================================	ORG	0x1800;; Name	(additional stack words required) Description;================================================================================================;calls outside this segment;;match_byteW_D18	(1+1+2);getch_net_D18	(1+1+1);setnic_addr_D18	(1+1+0);putnic_checkbyte_D18	(1+1+1);Dec_Put_n_Check_D18	(1+1+2);DecWPut_n_Check_D18	(1+1+2);Dec3BPut_n_Check_D18	(1+1+2);PutString_D18;MemMove_Low_L_D18	(1+0) Param78, Param79, Param7A, Param7B, FSR;;lcd_GotoLine3_3;lcd_GotoLine2_3;lcd_GotoLine1_3;lcd_GotoLine0_3;lcd_GotoLineW_D18;lcd_gotoxy_D18;Disp_Hex_Byte_D18;PrintString_D18;Fix_decbyte_D18;Disp_decword_D18;Disp_decbyteW_D18;Disp_dec3B_D18;Disp_Space_3;Disp_Colon_3;DisplaysW_D18;find_file_D18;ReadEEROM_D18 (1+2) Param78, Param79, FSR;WriteEEROM_D18 (1+2) Param78, FSR;i2c_read_D18;i2c_read1_D18;open_file_D18;close_file_D18;set_rtc_D18;ReadEEwW_D18 (1+0) RAM:none;WriteEEP79W_D18;WriteEEP79WPI_D18;SRAM_ReadDR_D18	(1+1+0);;=======================================================================================;segment 3 routines;; CGI's; "a=" Action Number	"GET /page.html?a=1";; Hash EGI's; DoHashEGI_A	<!--#A--> not used, sample code; DoHashEGI_B	<!--#B--> not used;;SendAdcsByIP;check_formargs	Check for arguments in HTTP request string ;; EGI's; DoEGI_a	@a Firmware rev. 'VUE-Ferric v1.0d6'; DoEGI_b	@b Unit's S/N '7001';;=========================================================================;=========================================================================; These routines are used by the bootloaded, their callers must not be moved.; i2c_read1 is a special case and the routine itself must not move.;i2c_read1_D18	mCall3To0	i2c_read1	RETURN;ZeroFName_D18	mCall3To0	ZeroFName	RETURN;DOP_Ram_D18	MOVWF	INDF	INCF	FSR,F	RETURN;find_file_D18	mCall3To0	find_file	RETURN;open_file_D18	mCall3To0	open_file	RETURN;close_file_D18	mCall3To0	close_file	RETURN;ReadEE79_D18	mCall3To0	ReadEE79	RETURN;WriteEEP79W_D18	mCall3To0	WriteEEP79W	RETURN;;lcd_GotoLine3_3	MOVLW	0x03	GOTO	lcd_GotoLineW_D18lcd_GotoLine2_3	MOVLW	0x02	GOTO	lcd_GotoLineW_D18lcd_GotoLine1_3	MOVLW	0x01	GOTO	lcd_GotoLineW_D18lcd_GotoLine0_3	CLRWlcd_GotoLineW_D18	mCall3To0	lcd_GotoLineW	RETURN;PrintString_D18	mCall3To0	PrintString	RETURN;;=========================================================================; EGI dispatchers;LastUCEGI	EQU	'A'	;Range checkingUCEGIDispatch	mPCLGoto	GOTO	DoEGI_A	;@A Oxi Flow Error;LastEGI	EQU	'g';EGIDispatch	mPCLGoto	GOTO	DoEGI_a	;Firmware rev. 'VUE-Ferric v1.0d6'	GOTO	DoEGI_b	; Unit's S/N '7001'	GOTO	DoEGI_c	;lcd Line 0	GOTO	DoEGI_d	;lcd Line 1	GOTO	DoEGI_e	;lcd Line 2	GOTO	DoEGI_f	;lcd Line 3	GOTO	DoEGI_g	; PWAccessCode;LastCGI	EQU	'c';CGIDispatch	mPCLGoto	GOTO	DoCGI_a	GOTO	DoCGI_b	GOTO	DoCGI_c;LastHashEGI	EQU	'B';HashEGIDispatch	mPCLGoto	GOTO	DoHashEGI_A	GOTO	DoHashEGI_B;LastCGI_Action	EQU	0x07;CGI_ActionDispatch	ANDLW	0x07	mPCLGoto	GOTO	DoCGI_Action_1	;not used	GOTO	DoCGI_Action_2	;SW2	GOTO	DoCGI_Action_3	;SW3	GOTO	DoCGI_Action_4	;SW4	GOTO	DoCGI_Action_5	;SW5	GOTO	DoCGI_Action_6	;SW6	GOTO	DoCGI_Action_7	;SW7	GOTO	http_recv_CGI;DoCGI_Action_1	GOTO	http_recv_CGIDoCGI_Action_2	MOVLW	0x01	;SW2	GOTO	DoCGI_ActionBtnDoCGI_Action_3	BTFSS	PWGood	;pass code must have been accepted	GOTO	DoCGI_Action_Rtn	MOVLW	0x02	;SW3	GOTO	DoCGI_ActionBtnDoCGI_Action_4	BTFSS	PWGood	GOTO	DoCGI_Action_Rtn	MOVLW	0x03	;SW4	GOTO	DoCGI_ActionBtnDoCGI_Action_5	BTFSS	PWGood	GOTO	DoCGI_Action_Rtn	MOVLW	0x04	;SW5	GOTO	DoCGI_ActionBtnDoCGI_Action_6	MOVLW	0x05	;SW6	GOTO	DoCGI_ActionBtnDoCGI_Action_7	MOVLW	0x06	;SW7DoCGI_ActionBtn	MOVWF	CGI_BtnQueued;tc;	MOVLW	d'0'	;1st line;	MOVWF	Param78;	MOVLW	d'17';	CALL	lcd_gotoxy_D18;	MOVF	CGI_BtnQueued,W;	CALL	Disp_Hex_Byte_D18;etc	BCF	PWGoodDoCGI_Action_Rtn	GOTO	http_recv_CGI;;======================================================================;Dispatch routines  (this is segment 3);segment 1 routines called;;match_word_D18	mCall3To1	match_word	RETURN;match_byteW_D18	mCall3To1	match_byteW	RETURN;getch_net_D18	mCall3To1	getch_net	RETURN;setnic_addr_D18	mCall3To1	setnic_addr	RETURN;putnic_checkbyte_D18	mCall3To1	putnic_checkbyte	RETURN; putch_net_W_D18	mCall3To1	putch_net_W	RETURN;Dec_Put_n_Check_D18	mCall3To1	Dec_Put_n_Check	RETURN;DecWPut_n_Check_D18	mCall3To1	DecWPut_n_Check	RETURN;	if Uses3BNumsDec3BPut_n_Check_D18	mCall3To1	Dec3BPut_n_Check	RETURN	endif;PutString_D18	mCall3To1	PutString	RETURN;MemMove_Low_L_D18	mCall3To1	MemMove_Low_L	RETURN;;Segment 0 Routines called;lcd_gotoxy_D18	mCall3To0	lcd_gotoxy	RETURN;Disp_Hex_Byte_D18	mCall3To0	Disp_Hex_Byte	RETURN;Fix_decbyte_D18	mCall3To0	Fix_decbyte	RETURN;Disp_decword_D18	mCall3To0	Disp_decword	RETURN;Disp_decbyteW_D18	mCall3To0	Disp_decbyteW	RETURN;	if Uses3BNumsDisp_dec3B_D18	mCall3To0	Disp_dec3B	RETURN	endif;Disp_Space_3	MOVLW	' '	GOTO	DisplaysW_D18Disp_Colon_3	MOVLW	':'DisplaysW_D18	mCall3To0	DisplaysW	RETURN;ReadEEROM_D18	mCall3To0	ReadEEROM	RETURN;WriteEEROM_D18	mCall3To0	WriteEEROM	RETURN;i2c_read_D18	mCall3To0	i2c_read	RETURN;	if HasRTCread_rtc_D18	mCall3To0	read_rtc	RETURN;set_rtc_D18	mCall3To0	set_rtc	RETURN	endif;ReadEE79PI_D18	mCall3To0	ReadEE79PI	RETURN;ReadEEwW_D18	mCall3To0	ReadEEwW	RETURN;WriteEEP79WPI_D18	mCall3To0	WriteEEP79WPI	RETURN;SRAM_ReadDR_D18	mCall3To0	SRAM_ReadDR	RETURN;SRAM_ReadPI_D18	mCall3To0	SRAM_ReadPI	RETURN;SRAM_WritePI_D18	mCall3To0	SRAM_WritePI	RETURN;SRAM_Read_D18	mCall3To0	SRAM_Read	RETURN;SRAM_Write_D18	mCall3To0	SRAM_Write	RETURN;Delay1Sec_D18	mCall3To0	Delay1Sec	RETURN;;============================================================================================;;todo! if fileidx=nn then do filenn EGIs else CommonEGIs;  this may become necessary later.;;========================================================================================; EGI handlers;;========================================================================================; EGI handlers;; Firmware rev. 'VUE-Ferric v1.0d6'DoEGI_a	MOVLW	SIGNONStrPtr	mCall3To1	PutString	RETURN;; Unit's S/N '7001'DoEGI_b	MOVLW	eSN0	CALL	ReadEEwW_D18	MOVWF	Param76	MOVLW	eSN1	CALL	ReadEEwW_D18	MOVWF	Param77	GOTO	DecWPut_n_Check_D18;;DoEGI_c	MOVLW	0x00	GOTO	DoEGI_ReadLCDDoEGI_d	MOVLW	0x40	GOTO	DoEGI_ReadLCDDoEGI_e	MOVLW	0x14	GOTO	DoEGI_ReadLCDDoEGI_f	MOVLW	0x54DoEGI_ReadLCD	mCall3To0	lcd_SetDDRamAddress	MOVLW	d'20'	;chars to move	MOVWF	Param79DoEGI_ReadLCD_L1	mCall3To0	lcd_ReadData	CALL	putnic_checkbyte_D18	DECFSZ	Param79,F	GOTO	DoEGI_ReadLCD_L1	RETURN;; DoEGI_g	MOVLW	PWAccessCode	;@g PWAccessCode	BCF	STATUS,IRP	GOTO	DoEGI_DecByte_E2;DoEGI_DecByteEE	CALL	ReadEEwW_D18	GOTO	Dec_Put_n_Check_D18;DoEGI_DecByte	BSF	STATUS,IRPDoEGI_DecByte_E2	MOVWF	FSR	MOVF	INDF,W	GOTO	Dec_Put_n_Check_D18;;==============================================================================================;DoEGI_A	RETURN;;==============================================================================================; CGI 'b=' action number; Convert text to an Int16 at Param77:Param76; Must match password access code, if not send back the index page;DoCGI_b	CALL	GetCGIInt16;; Now do something based on the value in Param76.;	TSTF	Param77	SKPZ	GOTO	DoCGI_b_BadPW	;>255 not valid	TSTF	Param76	SKPNZ	GOTO	DoCGI_b_BadPW	;0x00 not valid	MOVFW	Param76	SUBWF	PWAccessCode,W	SKPZ	GOTO	DoCGI_b_BadPW	BSF	PWGood	GOTO	http_recv_CGI;DoCGI_b_BadPW	CLRF	PWAccessCode	BCF	PWGood;	mBank2;	MOVLW	' ';	MOVWF	romdir.f.name	GOTO	http_recv_1;;;==============================================================================================; CGI 'c=' action number; Convert text to an Int16 at Param77:Param76; Must match the serial number to enable password access code, if not send back the index page;DoCGI_c	CALL	GetCGIInt16;; Now do something based on the value in Param76,Param77.;	MOVLW	eSN0	CALL	ReadEEwW_D18	SUBWF	Param76,W	SKPZ	GOTO	DoCGI_b_BadPW;	MOVLW	eSN1	CALL	ReadEEwW_D18	SUBWF	Param77,W	SKPZ	GOTO	DoCGI_b_BadPW;	BSF	_RP1	;Bank 2	MOVFW	IPDatagramID	BCF	_RP1	;Bank 0	MOVWF	PWAccessCode	GOTO	http_recv_CGI;;;==============================================================================;DoHashEGI_A	;MOVLW	Str_ImgSrcPtr	;<img src="	;mCall3To1	PutString	;mBank3	;MOVLW	Str_RedOnPtr	;redon.jpg">	;BTFSS	ErrorLamp	;MOVLW	Str_RedOffPtr	;redoff.jpg">	;mCall3To1	PutString	RETURN;DoHashEGI_B	RETURN;	if UsesUDP;========================================================================================; Handler for the incoming data at the UDP terminal port (TermPort);; Port 57 "any private terminal access"; Entry:next NIC byte to read is first byte of UDP data field; Exit:; RAM used:; Calls:(1+);UDP_Term_Handler	RETURN;	endif;========================================================================================; Handler for port IPDATAPORT; Port 87 Private data link port.; Entry:next NIC byte to read is first byte of TCP data field; Exit:; RAM used:; Calls:(1+);DataPort_handler	CLRF	tpxdlen+1	; tpxdlen = 0;	CLRF	tpxdlen;buffer the command in romdir.f.name	CLRF	Param79	;i=0;IPDP_handler_L1	CALL	getch_net_D18	;send one char to disp	BTFSC	Flags26,atend	GOTO	IPDP_handler_1	;atend	MOVLW	low romdir.f.name	ADDWF	Param79,W	;i	MOVWF	FSR	BSF	STATUS,IRP	MOVF	Param78,W	MOVWF	INDF	;117+Param79	INCF	Param79,F	MOVLW	ROM_FNAMELEN	SUBWF	Param79,W	BTFSS	STATUS,Z	;12 chars max	GOTO	IPDP_handler_L1	;IPDP_handler_1	CLRF	checklo	;checkhi = checklo = 0; 	CLRF	checkhi	BCF	Flags26,checkflag	; checkflag = 0; 	MOVLW	IPHDR_LEN+TCPHDR_LEN	;txin = IPHDR_LEN + TCPHDR_LEN;  O/P data to buffer, calc checksum 	MOVWF	txin;; setnic_addr((TXSTART*256)+sizeof(ETHERHEADER)+IPHDR_LEN+TCPHDR_LEN)	MOVLW	TXSTART	MOVWF	Param7B	MOVLW	ETHERHEADER_LEN+IPHDR_LEN+TCPHDR_LEN	MOVWF	Param7A	CALL	setnic_addr_D18;;send back and OK	MOVLW	'O'	CALL	putnic_checkbyte_D18	MOVLW	'K'	CALL	putnic_checkbyte_D18;	MOVLW	TFIN+TACK	;Close connection when sent 	MOVWF	tflags	MOVF	checkhi,W	; d_checkhi = checkhi   Save checksum 	MOVWF	d_checkhi	MOVF	checklo,W	; d_checklo = checklo	MOVWF	d_checklo	mCall3To1	tcp_xmit	; tcp_xmit();  ..do it 	RETURN;;;;==============================================================================================;==============================================================================;=====================================================================================================;; end of segment 3;;=====================================================================================================;;;;