	subtitle	"PanelControl.asm"	page;============================================================================================;;  FileName: PanelControl.asm;  Date: 8/1/09;  File Version: 1.2;  ;  Author: David M. Flynn;  Company: HPRR;  Project: Control Panel Low Level Routines;;============================================================================================; Notes:;  This file is common to all computers using GPCPU to Panel Interface.;  Select14 is used for all block modules (0..95).;; Address decode:; A0..A2 Latches on block modules; A3..A5 Column Selection; A6..A9 Row Decode; A10..A12 Function and board decode;;============================================================================================; Revision History;; 1.2     8/1/2009	Added dpIsOwner; 1.1     5/27/2009	Added ProccessButtons to this file.; 1.0     3/7/2009	Added Test all (output 24) to SvsTestOneModule; 1.0b1   6/2/2007	Added SvsTestOneModule.; 1.0a1   6/27/2005	Added PM_ReadInputs. Block module LEDs work.; 1.0d1   5/21/2005	First code.;;============================================================================================; constants;  AddressLatchAdd2	EQU	b'00000000'	;add to 10 bit bit numberPM_BoardAdder	EQU	b'00000100'PM_Board0	EQU	b'00000100'PM_Board1	EQU	b'00001000'PM_Board2	EQU	b'00001100'ClrAdd2	EQU	b'00010000'	;address of clear;PM_ButtonsHiAddr	EQU	b'00000011'PM_ButtonsLo0	EQU	b'00000000'PM_ButtonsLo1	EQU	b'01000000'PM_ButtonsLo2	EQU	b'10000000'PM_ButtonsLo3	EQU	b'11000000'PM_ButtonAdder	EQU	b'01000000';SevenSegOffset	EQU	0x10	;Add to base address;;;BlockModuleBitsL	EQU	0x0008	;One Byte for each block;BlockModuleBitsH	EQU	0x0009	; storage for LED bits;; Bank 3 RAM vars;BlockModuleNum	RES	1	;0..31;BlkModAddr0	RES	1;BlkModAddr1	RES	1;BlkModBits0	RES	1;BlkModBits1	RES	1;; Name	(additional stack words required) Description (Bank In/Out);============================================================================================;PM_ReadInputs	(1+0) Read inputs from board W(0..2) to Param74..Param77 (3/3);TestDispModule	(1+3) Test the module by lighting every LED (3/3);SvsTestOneModule	(1+1) Turn ON 1 of the outputs of one module (x/3);SvsTestModuleOFF	(1+1) Turn OFF all of the outputs of one module (x/3);LightSevenSeg	(1+0) Light the block module's 7 seg display (3/3);LightBlkDisplay	(1+3) Set 7 seg and 16 leds from Block Power and Cmd data (3/3);AllOutsOff	(0)   Turn all outputs off (X/3);ProccessButtons	Read 32,64 or 96 Btn inputs, convert to a 0..96 number (none, 1..64);	 Call from main loop.;;--- private ---;Light16LEDs	(1+0) Light the block module's LEDs (3/3);CalcModuleAddr	(0)   Convert BlockModuleNum to BlkModAddr (3/3);StoreBlkModBits	(1+2) Store BlkModBits in SRAM (3/3);RestoreBlkModBits	(1+2) Restore BlkModBits from SRAM (XReg=Blk#) (3/3);SetBlkMod_Addr	(0)   Latch the address BlkModAddr and RA0 (x/3);PM_GetData	(0)   Read Data from Panel Board(buttons). (3/3);GetSegments	(0+2) Convert Index to Bit Pattern (3/3);GetBlkModNum	(1+2) Convert block number to module number (3/3);;============================================================================================;============================================================================================; Read inputs from board W(0..2) to Param74..Param77 (3/3);; Entry: W=Board number 0..2, Bank3; Exit: Param74..Param77, Bank3; RAM Used: Param74, Param75, Param 76, Param77, Param78, Param79; Calls: (1+0) SetBlkMod_Addr, PM_GetData;PM_ReadInputs	ANDLW	0x03	;Yes, I'm paranoid	MOVWF	Param78	MOVLW	PM_ButtonsHiAddr	MOVWF	BlkModAddr1	MOVLW	PM_BoardAdder	MOVWF	BlkModBoardPM_ReadInputs_L2	MOVF	Param78,F	SKPNZ		;Address offset needed?	GOTO	PM_ReadInputs_1	; No	MOVLW	PM_BoardAdder	ADDWF	BlkModBoard,F	DECF	Param78,F	GOTO	PM_ReadInputs_L2;PM_ReadInputs_1	MOVLW	0x04	MOVWF	Param79	;Read 4 bytes	MOVLW	Param74	; put the data in 74..77	MOVWF	FSR	MOVLW	PM_ButtonsLo0	MOVWF	BlkModAddr0PM_ReadInputs_L1	CALL	SetBlkMod_Addr	CALL	PM_GetData	MOVWF	INDF	INCF	FSR,F	MOVLW	PM_ButtonAdder	ADDWF	BlkModAddr0,F	DECFSZ	Param79,F	GOTO	PM_ReadInputs_L1	RETURN;	;============================================================================================; Test the module by lighting every LED (3/3);; Entry: BlockModuleNum,Bank3; Exit: none, Bank3 selected; RAM Used: Param78, Param79, Param7B; Calls: (1+1) LightSevenSeg;;TestDispModule	MOVLW	DotEight	CALL	LightSevenSeg	MOVLW	low PMLED_AllOn	MOVWF	BlkModBits0	MOVLW	high PMLED_AllOn	MOVWF	BlkModBits1	BTFSS	TestCycleBit	GOTO	TestDispModule_1	BCF	TestCycleBit	MOVLW	low PMLED_E_W_Dir	IORWF	BlkModBits0,F	MOVLW	high PMLED_E_W_Dir	IORWF	BlkModBits1,F	GOTO	Light16LEDs;TestDispModule_1	BSF	TestCycleBit;	MOVLW	low PMLED_E_W_EOB;	IORWF	BlkModBits0,F	MOVLW	high PMLED_E_W_EOB	IORWF	BlkModBits1,F	GOTO	Light16LEDs;;============================================================================================; Turn ON 1 of the outputs of one module (x/3);; Entry: SvsBMdlNum,SvsBMdlVal; Exit: none, Bank3 selected; RAM Used: Param78, Param79, Param7B; Calls: (1+1) LightSevenSeg, Light16LEDs, TestDispModule;SvsTestOneModule	mBank3	MOVF	SvsBMdlNum,W	MOVWF	BlockModuleNum	MOVF	SvsBMdlVal,W	SUBLW	0x18	;24 test all	SKPNZ	GOTO	TestDispModule	CLRF	BlkModBits0	CLRF	BlkModBits1	CLRF	Param78	BTFSS	SvsBMdlVal,4	;>=0x10?	GOTO	SvsTestOneModule_1	; No;	MOVF	SvsBMdlVal,W	ANDLW	0x07	MOVWF	Param79	INCF	Param79,F	BSF	_CSvsTestOneModule_L1	RLF	Param78,F	DECFSZ	Param79,F	GOTO	SvsTestOneModule_L1;SvsTestOneModule_1	MOVF	Param78,W	CALL	LightSevenSeg	BTFSC	SvsBMdlVal,4	;<0x10?	GOTO	SvsTestOneModule_2;	INCF	SvsBMdlVal,W	MOVWF	Param79	BSF	_CSvsTestOneModule_L2	RLF	BlkModBits0,F	RLF	BlkModBits1,F	DECFSZ	Param79,F	GOTO	SvsTestOneModule_L2SvsTestOneModule_2	GOTO	Light16LEDs;;============================================================================================; Turn OFF all of the outputs of one module (x/3);; Entry: SvsBMdlNum; Exit: none, Bank3 selected; RAM Used: Param78, Param79, Param7B, Param7C; Calls: (1+1) LightSevenSeg, Light16LEDs;SvsTestModuleOFF	mBank3	MOVF	SvsBMdlNum,W	MOVWF	BlockModuleNum	CLRF	BlkModBits0	CLRF	BlkModBits1;	MOVLW	Dark	CALL	LightSevenSeg	GOTO	Light16LEDs;;============================================================================================; Light the block module's 7 seg display (3/3);; Entry: W=Dark..DotLetterF,BlockModuleNum,Bank3; Exit: none, Bank3 selected; RAM Used:Param78, Param79, Param7B; Calls: (1+0) SetBlkMod_Addr,CalcModuleAddr;LightSevenSeg	MOVWF	Param7B	;Save bit pattern;;BlkModAddr=Module Num x d'24'	CALL	CalcModuleAddr;	MOVLW	SevenSegOffset	ADDWF	BlkModAddr0,F	ADDCF	BlkModAddr1,F;	MOVLW	0x08	;Set 8 outputs	MOVWF	Param79LightSevenSeg_L1	mBank0;	MOVF	PORTA,W	ANDLW	0xFE	MOVWF	Param78	MOVF	Param7B,W	ANDLW	0x01	IORWF	Param78,W	MOVWF	PORTA	;Data Bit;	CALL	SetBlkMod_Addr	;Latch Address, all boards	MOVF	BlkModBoard,W	XORWF	BlkModAddr1,F	CALL	SetBlkMod_Addr	;Write data to BlkModBoard;	MOVF	BlkModBoard,W	XORWF	BlkModAddr1,F	INCF	BlkModAddr0,F	RRF	Param7B,F	;Next bit	DECFSZ	Param79,F	;Last bit?	GOTO	LightSevenSeg_L1	; No	RETURN;;=================================================================================================; Set 7 seg and 16 leds from Block Power and Cmd (3/3);; Entry: W=Block Number, Bank3; Exit: BlkModBits, Bank3; RAM Used: Param78, Param79, Param7A, Param7B, Param7C, XReg; Calls: (1+3) GetBlockPwrTableX, GetBlockPwrTable2X, StorsBlkModBits, Light16LEDs, LightSevenSeg;LightBlkDisplay	MOVWF	XReg	CALL	GetBlkModNum	;Convert Blk# to Module#	BTFSC	Param78,7	;Used?	RETURN		; No, do nothing	MOVWF	BlockModuleNum	; Yes	CALL	GetBlockPwrTableX_D10	MOVWF	BPTemp	CALL	GetBlockPwrTable2X_D10	;Param78=BPT2	MOVWF	BPTemp+1	BCF	IsMyCabFlag	if HasAThrottle	mCall2To3	RlyBitsToThr	;Param78=Thr#	mCall2To3	XlateThrToCab	SUBLW	MyCabNum	SKPNZ	BSF	IsMyCabFlag	else	BTFSC	BPTemp,7	;Any Cab flag	BSF	IsMyCabFlag	endif;	MOVLW	0x00	;Block not powered	BTFSS	BPTemp,7	;Block PWR tbl any cab flag?	GOTO	LightBlkDisplay_2	; No, block is off;	MOVLW	Five	BTFSC	BPTemp,0	;Cab 5?	GOTO	LightBlkDisplay_2	; Yes;	MOVLW	Four	BTFSC	BPTemp,1	;Cab 4	GOTO	LightBlkDisplay_2	; Yes;		MOVLW	Three	BTFSC	BPTemp,2	;Cab 3	GOTO	LightBlkDisplay_2	; Yes;	MOVLW	Two	BTFSC	BPTemp,3	;Cab 2	GOTO	LightBlkDisplay_2	; Yes;	MOVLW	One	BTFSC	BPTemp,4	;Cab 1	GOTO	LightBlkDisplay_2	; Yes;	BTFSS	BPTemp+1,0	;Cab 9?	GOTO	LBD_Thr8	; No	CALL	Throttle9ToSybol	GOTO	LightBlkDisplay_2	; Yes;LBD_Thr8	BTFSS	BPTemp+1,1	;Cab 8?	GOTO	LBD_Thr7	; No	CALL	Throttle8ToSybol	GOTO	LightBlkDisplay_2	; Yes;LBD_Thr7	BTFSS	BPTemp+1,2	;Cab 7?	GOTO	LBD_Thr6	; No	CALL	Throttle7ToSybol	GOTO	LightBlkDisplay_2	; Yes;LBD_Thr6	BTFSS	BPTemp+1,3	;Cab 6	GOTO	LBD_ThrErr	; No	CALL	Throttle6ToSybol	GOTO	LightBlkDisplay_2	; Yes;LBD_ThrErr	MOVLW	LetterE	; No, Error!;LightBlkDisplay_2	MOVWF	Param75	;Save LED bits	if dpIsOwner; Light decimal point is the block is powered by someone else.	BTFSS	BPTemp,7	GOTO	LBD_Owner_End	MOVLW	0x1F	ANDWF	BPTemp,W	SKPNZ	GOTO	LBD_Owner_1	CALL	GetBlockCmdTableX_D10	ANDLW	0x1F	ANDWF	BPTemp,W	MOVLW	Dot	SKPNZ	IORWF	Param75,F	GOTO	LBD_Owner_EndLBD_Owner_1	CALL	GetBlockCmdTable2X_D10	ANDLW	0x0F	ANDWF	BPTemp+1,W	MOVLW	Dot	SKPNZ	IORWF	Param75,FLBD_Owner_End	MOVF	Param75,W	;reload LED bits	else	BTFSC	BPTemp,6	;Occupied?	IORLW	Dot	; Yes, light the dp	BTFSC	BPTemp,5	;Occupied?	IORLW	Dot	; Yes, light the dp	endif;	CALL	LightSevenSeg;	CALL	RestoreBlkModBits	MOVLW	low PMMaskBiC_Ambr	;Don't change Amber LEDs	ANDWF	BlkModBits0,F	MOVLW	high PMMaskBiC_Ambr	ANDWF	BlkModBits1,F;	CALL	GetBlockPwrTableX_D10	MOVWF	Param75	ANDLW	b'01100000'	SKPZ		;Detecting?	GOTO	LightBlkDisplay_3	; Yes	BTFSS	IsMyCabFlag	;My cab?	GOTO	LightBlkDisplay_5	; No;	MOVLW	low PMLED_Grn	IORWF	BlkModBits0,F	MOVLW	high PMLED_Grn	IORWF	BlkModBits1,F	CALL	Do_EOB_LEDs	GOTO	LightBlkDisplay_7;LightBlkDisplay_3	BTFSS	IsMyCabFlag	;My cab?	GOTO	LightBlkDisplay_4	; No	MOVLW	low PMLED_Wht	IORWF	BlkModBits0,F	MOVLW	high PMLED_Wht	IORWF	BlkModBits1,F	GOTO	LightBlkDisplay_6;; Detecting and not poweredLightBlkDisplay_4	MOVLW	low PMLED_Red	IORWF	BlkModBits0,F	MOVLW	high PMLED_Red	IORWF	BlkModBits1,F	GOTO	LightBlkDisplay_7;; not detecting and not poweredLightBlkDisplay_5	GOTO	LightBlkDisplay_7;; detecting and poweredLightBlkDisplay_6	CALL	Do_EOB_LEDs	MOVF	Param78,F	SKPZ	GOTO	LightBlkDisplay_7;; light east/west detection LEDsLightBlkDisplay_6_1;	MOVLW	low PMLED_EastDir;	BTFSS	Param75,5	; bit5 = Detect West;	IORWF	BlkModBits0,F	MOVLW	high PMLED_EastDir	BTFSS	Param75,5	; bit5 = Detect West	IORWF	BlkModBits1,F	MOVLW	low PMLED_WestDir	BTFSS	Param75,6	; bit6 = Detect East	IORWF	BlkModBits0,F;	MOVLW	high PMLED_WestDir;	BTFSS	Param75,6	; bit6 = Detect East;	IORWF	BlkModBits1,F;; doneLightBlkDisplay_7	CALL	StoreBlkModBits;; fall trhrough to Light16LEDs;============================================================================================; Light the block module's LEDs (3/3);; Entry: BlockModuleNum,BlkModBits,Bank3; Exit: none, Bank3 selected; RAM Used:Param78, Param79, Param7B, Param7C; Calls: (1+0) SetBlkMod_Addr,CalcModuleAddr;Light16LEDs	MOVF	BlkModBits0,W	;Save bit pattern	MOVWF	Param7B	MOVF	BlkModBits1,W	MOVWF	Param7C;	CALL	CalcModuleAddr;	MOVLW	0x10	;Set 16 outputs	MOVWF	Param79Light16LEDs_L1	mBank0;	MOVF	PORTA,W	ANDLW	0xFE	MOVWF	Param78	MOVF	Param7B,W	ANDLW	0x01	IORWF	Param78,W	MOVWF	PORTA	;Data Bit;	CALL	SetBlkMod_Addr	;Latch Address and data	MOVF	BlkModBoard,W	XORWF	BlkModAddr1,F	CALL	SetBlkMod_Addr;	MOVF	BlkModBoard,W	XORWF	BlkModAddr1,F	INCF	BlkModAddr0,F	SKPNZ	INCF	BlkModAddr1,F	RRF	Param7C,F	RRF	Param7B,F	DECFSZ	Param79,F	GOTO	Light16LEDs_L1	RETURN;;=============================================================================================;Do_EOB_LEDs	CLRF	Param78	mBank0	MOVF	tickcount,W	mBank3	ANDLW	0x10	SKPNZ	RETURN	CALL	GetEOBDetectors	ANDLW	0x60	;E/W	SKPNZ	RETURN	SUBLW	0x60	SKPZ		;Both?	GOTO	Do_EOB_LEDs_1	; No;	MOVLW	high PMLED_E_W_EOB	;Both	IORWF	BlkModBits1,F	RETURN;Do_EOB_LEDs_1	MOVLW	low PMLED_EastEOB	BTFSS	Param78,5	; bit5 = Detect West	IORWF	BlkModBits0,F	MOVLW	high PMLED_EastEOB	BTFSS	Param78,5	; bit5 = Detect West	IORWF	BlkModBits1,F;	MOVLW	low PMLED_WestEOB;	BTFSS	Param78,6	; bit6 = Detect East;	IORWF	BlkModBits0,F	MOVLW	high PMLED_WestEOB	BTFSS	Param78,6	; bit6 = Detect East	IORWF	BlkModBits1,F		RETURN;;===================================================================================;Convert BlockModuleNum to BlkModAddr (3/3);BlkModAddr = (ModuleNum mod 32) x d'24';BlkModBoard = (ModuleNum \ 32) x 4 + 1;; Entry: Bank3; Exit: none, Bank3 selected; RAM Used:none; Calls: (0) none;CalcModuleAddr	MOVF	BlockModuleNum,W	ANDLW	0x1F	MOVWF	BlkModAddr0	;0x15 x1	CLRF	BlkModAddr1	;0x0015 x1	ADDWF	BlkModAddr0,F	;0x002A x2	ADDWF	BlkModAddr0,F	;0x003F x3	ADDCF	BlkModAddr1,F	;0x003F x3	BCF	_C	RLF	BlkModAddr0,F	RLF	BlkModAddr1,F	;0x007E	RLF	BlkModAddr0,F	RLF	BlkModAddr1,F	;0x00FC	RLF	BlkModAddr0,F	RLF	BlkModAddr1,F	;0x01F8	MOVF	BlockModuleNum,W	ANDLW	0x60	MOVWF	BlkModBoard	;00,20,40	SWAPF	BlkModBoard,F	;0,2,4	RLF	BlkModBoard,F	;0,4,8	MOVLW	0x04	ADDWF	BlkModBoard,F	;4,8,C	RETURN;============================================================================================; Store BlkModBits in SRAM (3/3);; Entry: XReg=Block Number,BlkModBits,Bank3; Exit: none, Bank3 selected; RAM Used:Param78, XReg; Calls: (1+2) SetSet_1X;StoreBlkModBits	MOVF	BlkModBits0,W	MOVWF	Param78	MOVLW	low BlockModuleBitsL	CALL	SetSet_1X_D10	MOVF	BlkModBits1,W	MOVWF	Param78	MOVLW	low BlockModuleBitsH	GOTO	SetSet_1X_D10;;============================================================================================; Restore BlkModBits from SRAM (3/3);; Entry: XReg=Block Number,Bank3; Exit: BlkModBits, Bank3 selected; RAM Used:Param78, XReg; Calls: (1+2) GetGet_1X;RestoreBlkModBits	MOVLW	low BlockModuleBitsL	CALL	GetGet_1X_D10	MOVWF	BlkModBits0	MOVLW	low BlockModuleBitsH	CALL	GetGet_1X_D10	MOVWF	BlkModBits1	RETURN;;============================================================================================; Turn all outputs off;; Entry: none; Exit: none; RAM Used:; Calls:;AllOutsOff	mBank3	MOVLW	ClrAdd2	MOVWF	BlkModAddr1;; fall through to SetBlkMod_Addr;=================================================================================; Latch the address BlkModAddr and RA0 (x/3);; Entry:BlkModAddr, RA0=Data Bit; Exit:address bus and CurrentAddr = BlkModAddr;      PORTD is set for output, Bank3 selected; RAM used: none (verified 6/26/05); Calls:(0) none;SetBlkMod_Addr	mBank1	MOVLW	All_Out	MOVWF	TRISD	BSF	_RP1	;Bank3	MOVF	BlkModAddr0,W	SUBWF	CurrentAddr0,W	BTFSC	_Z	GOTO	SetBlkMod_Addr_1	MOVF	BlkModAddr0,W	MOVWF	CurrentAddr0	;Put A0..A7 on the bus	mBank0	MOVWF	PORTD;	MOVF	PORTB,W	ANDLW	AddressMask	IORLW	Select0	MOVWF	PORTB	BCF	PORTB,SelectEnable	NOP		;Delay 200nS	BSF	PORTB,SelectEnable;	mBank3SetBlkMod_Addr_1	MOVF	BlkModAddr1,W	SUBWF	CurrentAddr1,W	BTFSC	_Z	GOTO	SetBlkMod_Addr_2	MOVF	BlkModAddr1,W	MOVWF	CurrentAddr1	;Put A8..A15 on the bus	mBank0	MOVWF	PORTD;	MOVF	PORTB,W	ANDLW	AddressMask	IORLW	Select1	MOVWF	PORTB	BCF	PORTB,SelectEnable	NOP	BSF	PORTB,SelectEnable;SetBlkMod_Addr_2	mBank0	MOVF	PORTB,W	ANDLW	AddressMask	IORLW	Select14	;Select Brain to Panel Boards	MOVWF	PORTB	BCF	PORTB,SelectEnable	;Latch Address and RA0 into buffers on Panel boards	NOP	BSF	PORTB,SelectEnable	mBank3;	RETURN;;============================================================================================; Read Data from Panel Board(buttons). (3/3);; Entry: BlkModAddr1, Bank3; Exit: W=Data, Bank3; RAM Used: none; Calls: (0) none;	PM_GetData	MOVF	BlkModBoard,W	XORWF	BlkModAddr1,W	MOVWF	CurrentAddr1	mBank0	MOVWF	PORTD;	MOVF	PORTB,W	ANDLW	AddressMask	IORLW	Select1	MOVWF	PORTB	BCF	PORTB,SelectEnable	;put address on bus	NOP	BSF	PORTB,SelectEnable;	mBank1	MOVLW	All_In	MOVWF	TRISD	BCF	_RP0	;Bank 0	MOVF	PORTB,W	ANDLW	AddressMask	IORLW	Select14	MOVWF	PORTB	BCF	PORTB,SelectEnable	;Latch address	NOP	NOP	MOVF	PORTD,W	BSF	PORTB,SelectEnable	mBank3	RETURN;;======================================================================================; Convert Index to Bit Pattern (hex digit x 2 + 1 for Dot);; Entry: W=0x00..0x21 Index to Segments table; Exit: W=LED bit pattern; RAM Used: none; Calls: (0+2) GetGet_Read;GetSegments	CLRF	SRAM_Addr1	ADDLW	low Segments	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	MOVLW	high Segments	ADDLW	low evDataROM	ADDWF	SRAM_Addr1,F	GOTO	GetGet_Read_D10;;======================================================================================; Convert block number to module number (3/3);; Entry: W=Block Number; Exit: W & Param78 = Module Number; RAM Used: none; Calls: (0+2) GetGet_Read;GetBlkModNum	CLRF	SRAM_Addr1	ADDLW	low BlkModID	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	MOVLW	high BlkModID	ADDLW	low evDataROM	ADDWF	SRAM_Addr1,F	GOTO	GetGet_Read_D10;;========================================================================================;; Entry: XReg=Block Num; Exit:;GetEOBDetectors	CLRF	Param74	MOVF	XReg,W	MOVWF	Param7A	CLRF	SRAM_Addr2	MOVLW	high EOB_Detectors	ADDLW	low evDataROM	MOVWF	SRAM_Addr1	MOVLW	low EOB_Detectors	ADDWF	Param7A,W	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	MOVF	Param7A,W	ADDWF	SRAM_Addr0,F	ADDCF	SRAM_Addr1,F	CALL	SRAM_ReadPI_D10	;LSB of east SM	MOVWF	Param7B	CALL	SRAM_Read_D10	MOVWF	Param7C	mBank3	SUBLW	0xFE	;-none	SKPNZ		;valid SM #?	GOTO	GetEOBDetectors_1	; No	MOVF	Param7C,W	MOVWF	XReg	CALL	GetSMTableHighX_D10	BTFSC	Param78,7	;SM ControlBit	BSF	Param74,5	;West;GetEOBDetectors_1	MOVF	Param7B,W	SUBLW	0xFE	;-none	SKPNZ		;valid SM #?	GOTO	GetEOBDetectors_2	; No	MOVF	Param7B,W	MOVWF	XReg	CALL	GetSMTableHighX_D10	BTFSC	Param78,7	;SM ControlBit	BSF	Param74,6	;East;	GetEOBDetectors_2	MOVF	Param7A,W	MOVWF	XReg	;restore XReg	MOVF	Param74,W	;result	MOVWF	Param78	RETURN;;;========================================================================================; Get the correct sybol for this block/throttle;; Entry: XReg=BlkNum; Exit: W=bit pattern; RAM user:; Calls:;Throttle6ToSybol	MOVLW	High BlkThr6ToSym	MOVWF	SRAM_Addr1	MOVLW	low BlkThr6ToSym	GOTO	ThrottleToSybol;Throttle7ToSybol	MOVLW	High BlkThr7ToSym	MOVWF	SRAM_Addr1	MOVLW	low BlkThr7ToSym	GOTO	ThrottleToSybol;Throttle8ToSybol	MOVLW	High BlkThr8ToSym	MOVWF	SRAM_Addr1	MOVLW	low BlkThr8ToSym	GOTO	ThrottleToSybol;Throttle9ToSybol	MOVLW	High BlkThr9ToSym	MOVWF	SRAM_Addr1	MOVLW	low BlkThr9ToSym;ThrottleToSybol	ADDWF	XReg,W	;BlkNum	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	MOVLW	low evDataROM	ADDWF	SRAM_Addr1,F	GOTO	GetGet_Read_D10;;=================================================================================================;===============================================================================================; Read 32,64 or 96 Btn inputs, convert to a 0..96 number (none, 1..64); If a block button is pressed, covert it to a block number and;  set block number.;; Entry: None; Exit: LastBtn;ProccessButtons	MOVLW	0x00	;Board 0x00	CALL	PM_ReadInputs	;Param74..Param77;	MOVLW	d'32'	;last btn #	MOVWF	Param78	;Btn#=Module#+1	MOVLW	0x20	;test 32 btns	MOVWF	Param79ProccessButtons_L1	RLF	Param74,F	RLF	Param75,F	RLF	Param76,F	RLF	Param77,F	BTFSS	_C	;Button Active?	GOTO	ProccessButtons_1	; Yes;	DECF	Param78,F	DECFSZ	Param79,F	GOTO	ProccessButtons_L1;	if BlockToBrainBds>1; Buttons 33..64	MOVLW	0x01	;Board 0x01	CALL	PM_ReadInputs	;Param74..Param77;		MOVLW	d'64'	;last btn #	MOVWF	Param78	;Btn#=Module#+1	MOVLW	0x20	;test 32 btns	MOVWF	Param79ProccessButtons_L2	RLF	Param74,F	RLF	Param75,F	RLF	Param76,F	RLF	Param77,F	BTFSS	_C	;Button Active?	GOTO	ProccessButtons_1	; Yes;	DECF	Param78,F	DECFSZ	Param79,F	GOTO	ProccessButtons_L2	endif;	if BlockToBrainBds>2; Buttons 65..96	MOVLW	0x02	;Board 0x02	CALL	PM_ReadInputs	;Param74..Param77;		MOVLW	d'96'	;last btn #	MOVWF	Param78	;Btn#=Module#+1	MOVLW	0x20	;test 32 btns	MOVWF	Param79ProccessButtons_L3	RLF	Param74,F	RLF	Param75,F	RLF	Param76,F	RLF	Param77,F	BTFSS	_C	;Button Active?	GOTO	ProccessButtons_1	; Yes;	DECF	Param78,F	DECFSZ	Param79,F	GOTO	ProccessButtons_L3	endif;	GOTO	NoBtn;;Found one Param78=Btn#;	ProccessButtons_1	MOVF	Param78,W	SUBWF	LastBtn,W	;Compare to the last btn found	SKPNZ	GOTO	Debounce_Btn;	BTFSS	TestModeFlag	;Test mode?	GOTO	ProccessButtons_2	; No;;------------------; Do Test	DECF	Param78,W	;Module#	MOVWF	BlockModuleNum	GOTO	TestDispModule;------------------;ProccessButtons_2	MOVF	Param78,W	MOVWF	LastBtn	;1..64; convert Btn to block number	MOVLW	high BtnToBlkNum	ADDLW	low evDataROM	MOVWF	SRAM_Addr1	MOVLW	low BtnToBlkNum	ADDWF	Param78,W	;1..64	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	CALL	GetGet_Read_D10;	BTFSC	Param78,7	;Valid block?	GOTO	DoBeep	; No;	MOVWF	XReg	;XReg=Block Number;; Handle the btn for this block; If this block is used by another then do nothing; If this block is not in use then take it.; If this block is in use by us turn it off.;;XReg=BlockNum;LastCabVal 1..9, cab 1..DT;BPTemp2>>BlockCmdTable, BPTemp2+1>>BlockCmdTable2;	MOVF	LastCabVal,W	SKPNZ	GOTO	MainLoop_7_NotValid	;handle no cab selected	MOVWF	Param78	;Cab #	mCall2To3	XlateCabToThr	;if Cab>5 translate to throttle#	MOVF	Param78,F	;Throttle #	SKPNZ	GOTO	MainLoop_7_NotValid	;If it's on and ours clr blk else beep.;		mCall2To3	ThrToRlyBits	;Param78>>BPTemp2;	CALL	GetBlockPwrTableX_D10	BTFSS	Param78,7	;In use?	GOTO	MainLoop_7_BlkSet	;No;;If the block in XReg is on and ours clearr the block else beep.;MainLoop_7_NotValid	CALL	GetBlockCmdTableX_D10	MOVWF	BPTemp	CALL	GetBlockCmdTable2X_D10	MOVWF	BPTemp+1;	BTFSC	BPTemp,7	;Is it ours?	GOTO	MainLoop_7_BlkClr	; Yes, turn it off. was MainLoop_7_Ours		BTFSS	BPTemp+1,7	;Is it ours?	GOTO	DoBeep	; No;MainLoop_7_BlkClr	MOVLW	0x80	MOVWF	BPTemp2	MOVWF	BPTemp2+1	GOTO	MainLoop_7_BlkSet_1;;---------------------------------; Test to see if a parallel block is commanded to the same throttle, if not then assign the block else beep.;; Entry: XReg=BlkNum, BPTemp2=BlockCMD, LastCabVal=Cab#;MainLoop_7_BlkSet	CALL	GetParallelBlkID	BTFSC	Param78,7	;Has a parallel block?	GOTO	MainLoop_7_BlkSet_1	; No;check the parallel blocks	MOVF	XReg,W	MOVWF	Param7A	;Save the real block number.	MOVF	Param78,W	MOVWF	XReg	;Parallel Blk ID# (aka first blknum of set)	MOVWF	Param7B;MainLoop_7_BlkSet_L1	CALL	GetBlockPwrTableX_D10	BTFSS	Param78,7	GOTO	MainLoop_7_BlkSet_Nxt	MOVWF	BPTemp	CALL	GetBlockPwrTable2X_D10	MOVWF	BPTemp+1	mCall2To3	RlyBitsToThr	;BPTemp>>Param78	MOVF	Param78,F	;In use?	SKPNZ	GOTO	MainLoop_7_BlkSet_Nxt	; No;	mCall2To3	XlateThrToCab	;RAM used: Param78, Param79	MOVF	Param78,W	;Cab using this block	SUBWF	LastCabVal,W	;Cab to be assigned	SKPNZ	GOTO	DoBeep	;This cab has another block;MainLoop_7_BlkSet_Nxt	INCF	XReg,F	CALL	GetParallelBlkID	SUBWF	Param7B,W	;Parallel Block ID#	SKPNZ	GOTO	MainLoop_7_BlkSet_L1;	MOVF	Param7A,W	MOVWF	XReg;;Dump duplicate commandsMainLoop_7_BlkSet_1	CALL	GetBlockCmdTable2X_D10	SUBWF	BPTemp2+1,W	SKPZ	GOTO	MainLoop_7_BlkSet_2	CALL	GetBlockCmdTableX_D10	SUBWF	BPTemp2,W	SKPNZ	RETURN;MainLoop_7_BlkSet_2	MOVF	BPTemp2+1,W	CALL	SetBlockCmdTable2X_D10	MOVF	BPTemp2,W	CALL	SetBlockCmdTableX_D10	BSF	BlockCmdChngFlag	BSF	BlockCmdChngFlag2	mCall2To3	CLICK	RETURN;NoBtn	CLRF	LastBtnDebounce_Btn;	RETURN;DoBeep	mCall2To3	Beep	RETURN;==============================================================================================;GetParallelBlkID	MOVLW	high ParallelBlks	ADDLW	low evDataROM	MOVWF	SRAM_Addr1	MOVLW	low ParallelBlks	ADDWF	XReg,W	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	GOTO	GetGet_Read_D10;;