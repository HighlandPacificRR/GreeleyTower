	subtitle	"Communication.asm"	page;*******************************************************************************;;    Filename: Communication.asm;    Date:9/5/2004;    File Revision:1.0.5;;    Author:David M. Flynn;    Company:Oxford V.U.E., Inc.;    Project: TCC;; ;**********************************************************************;; Notes:;  Caution most routines called within this include file;  leave Bank3 selected.;	ifndef UseOldDMFEIntf	constant	UseOldDMFEIntf=1	endif;;;;**********************************************************************; Revision History;;1.0.5  9/6/2004	Standardized PIC Version;1.04 added HIGY Computer;1.03 added MP SM Computer;1.02 added sample code for init/setup 8-29-98;1.01 added addresses for Signal System Computer 8-29-98;1.0  first working version w/ priority and time-out 8-10-98;;**********************************************************************; Routine	Description;=======================================================================; CommInit	Initialize Set all vars to zero; SendReceive	Move Each used port forward one status; ClearAllOuts	Clear All output bits for this port; TestDAV	Test Data Availible (incomming data); TestSend	Test Data Send (outgoing data); ;=======================================================================;;Offsets into sram page sramComIOParamsInputSlot	EQU	0x00	;Slot 0..2InputBoard	EQU	0x08	;Board 0..7InputPort	EQU	0x10	;Port 00,10,20,30,40,50,60,70OutputSlot	EQU	0x18	;Slot 0..2OutputBoard	EQU	0x20	;Board 1..7OutputPort	EQU	0x28	;Port 00,10,20,30,40,50,60,70ODataType	EQU	0x30	;to port bits 5..7, 0..7OData	EQU	0x38	;0..FFIDataType	EQU	0x40	;to port bits 5..7, 0..7IData	EQU	0x48	;0..FFDataToSend	EQU	0x50	;high bit 00,80DataReceived	EQU	0x58	;high bit 00,80PortStatus	EQU	0x60	;0=clearOldPortStatus	EQU	0x68	;if Status Same forPortStatusTimer	EQU	0x70	;FF cycles clear outputs;;PortNumber	RES	1	;bank3: Port Number 0..7;WDogTime	EQU	0xFF	;loops then reset port;;How it Works:;;Reading from client;------------------------------;Status=0 (ready);See C_DAV, set C_Send, Set Status=2;Status=2;See DataValid, read Data, Clear C_Send, Set Status=4;Status=4;See DataValid clear, Set Status=0;;Writing to client;------------------------------;Status=0 (ready);Set S_DAV, Set Status=1;Status=1;See S_Send, Clear S_DAV, Set Data, Set DataValid, Set Status=3;Status=3;See S_Send clear, Clear Data, Clear DataValid, Set Status=0;;;========This file is common to all programs========;==Comment/Decomment the following lines as needed==;===================================================;;  ******** Greely Computer *********;;Clients;  TCC ComIO;;Server;  Greely;;Bit offsets for I/O bits S=Server C=Client;S_DAV	EQU	0x00	;output;S_Send	EQU	0x01	;input;C_DAV	EQU	0x02	;input;C_Send	EQU	0x03	;output;;;  ******** TCC Display Computer *********;;Clients;  TCC ComIO;;Server;  TCC Display;;Bit offsets for I/O bits S=Server C=Client;S_DAV	EQU	0x00	;output;S_Send	EQU	0x01	;input;C_DAV	EQU	0x02	;input;C_Send	EQU	0x03	;output;;;  ********** MP Block Power Computer **********;;Clients;  TCC ComIO;;Server;  MP BlockPower;;Bit offsets for I/O bits S=Server C=Client;S_DAV	EQU	0x00	;output;S_Send	EQU	0x01	;input;C_DAV	EQU	0x02	;input;C_Send	EQU	0x03	;output;;;  ********** MP Switch Machine Computer **********;;Clients;  TCC ComIO;;Server;  MP Switch Machines;;Bit offsets for I/O bits S=Server C=Client;S_DAV	EQU	0x00	;output;S_Send	EQU	0x01	;input;C_DAV	EQU	0x02	;input;C_Send	EQU	0x03	;output;;;  ********* TCC Block Power Keyboard Computer *********;;Server;  TCC Block Power Keyboard;;Clients;  TCC ComIO;;Bit offsets for I/O bits S=Server C=Client;S_DAV	EQU	0x00	;output;S_Send	EQU	0x01	;input;C_DAV	EQU	0x02	;input;C_Send	EQU	0x03	;output;;;  ********** TCC Signal System Computer **********;;Clients;  TCC ComIO;;Server;  TCC Signal System Computer;;Bit offsets for I/O bits S=Server C=Client;S_DAV	EQU	0x00	;output;S_Send	EQU	0x01	;input;C_DAV	EQU	0x02	;input;C_Send	EQU	0x03	;output;;;  ********** TCC Communications Computer **********;;Clients;  MP SwitchMachines;  MP BlockPower;  TCC Block Power Keyboard;  TCC Display;  TCC Signals;  Highland Greely;;Server;  TCC ComIO;;Bit offsets for I/O bits S=Server C=Client;C_DAV	EQU	0x00	;input;C_Send	EQU	0x01	;output;S_DAV	EQU	0x02	;output;S_Send	EQU	0x03	;input;;DataValid	EQU	0x04	;in/outDataType	EQU	0x05	;in/out 5..7Data	EQU	0x08	;in/out 8..F;;bit   0 = Client Data AVailible (input);bit   1 = Client Send (output);bit   2 = Server Data AVailible (output);bit   3 = Server Send (Input);bit   4 = Data Valid (Input/Output);bits  5..7 = Data Type (Input/Output);bits  8..F = Data (Input/Output);;=======================================================;sample code...;	CALL	CommInit	; once from main prog init;	CALL	SendReceive	; each time through the main loop;;;to send:;	mBank3;	CLRF	SRAM_Addr2;	MOVLW	low sramComIOParams;	MOVWF	SRAM_Addr1;;	MOVLW	thePort	;0..7;	ADDLW	DataToSend;	MOVWF	SRAM_Addr0;	mCall2To0	SRAM_Read;	ANDLW	0x80;	BTFSS	STATUS,Z	;last data not sent yet?;	GOTO	NoData	; No;	;	mBank3;	MOVLW	thePort	;0..7;	ADDLW	ODataType;	MOVWF	SRAM_Addr0;	MOVLW	theDataType	;0..7;	mCall2To0	SRAM_Write;;	mBank3;	MOVLW	thePort	;0..7;	ADDLW	OData;	MOVWF	SRAM_Addr0;	MOVLW	theData	;0..7;	mCall2To0	SRAM_Write;;	mBank3;	MOVLW	thePort	;0..7;	ADDLW	DataToSend;	MOVWF	SRAM_Addr0;	MOVLW	0x80	;0..7;	mCall2To0	SRAM_Write;NoData;;to receive:;	mBank3;	CLRF	SRAM_Addr2;	MOVLW	low sramComIOParams;	MOVWF	SRAM_Addr1;;	MOVLW	thePort	;0..7;	ADDLW	DataReceived;	MOVWF	SRAM_Addr0;	mCall2To0	SRAM_Read;	ANDLW	0x80;	BTFSC	STATUS,Z	;Data received yet?;	GOTO	NoData	; No;	;	mBank3;	MOVLW	thePort	;0..7;	ADDLW	IDataType;	MOVWF	SRAM_Addr0;	mCall2To0	SRAM_Read;	MOVWF	tempDataType;;	mBank3;	MOVLW	thePort	;0..7;	ADDLW	IData;	MOVWF	SRAM_Addr0;	mCall2To0	SRAM_Read;	MOVWF	tempData;;	mBank3;	MOVLW	thePort	;0..7;	ADDLW	DataReceived;	MOVWF	SRAM_Addr0;	CLRW;	mCall2To0	SRAM_Write;	CALL	processThisData;;NoData;;============================================================================================;Initialize Set all vars to zero; Entry: none; Exit: Bank3 is selectedCommInit	mBank3	CLRF	PortNumber	CLRF	SRAM_Addr2	MOVLW	low sramComIOParams	MOVWF	SRAM_Addr1	CLRF	SRAM_Addr0	;clear whole pageCommInit1	CLRW	mCall3To0	SRAM_Write	mBank3	DECFSZ	SRAM_Addr0,F	GOTO	CommInit1	RETURN	;	if oldCode;test codeDoIOTest	CLRW	mCall3To0	lcd_GotoLineW	mBank3	CLRF	ISlot	CLRF	OSlot	CLRF	IBoard	MOVLW	0x01	MOVWF	OBoard	MOVLW	0x50	MOVWF	IBit	MOVLW	0x00	MOVWF	OBitTEST1	CALL	Input	CLRF	OActive	BTFSC	IActive,7	BSF	OActive,7	MOVLW	'0'	BTFSC	IActive,7	MOVLW	'1'	CALL	DisplaysW_D18	mBank3	CALL	Output	INCF	OBit,F	INCF	IBit,F	BTFSS	IBit,5	GOTO	TEST1	RETURN	endif;;===========================================; Move Each used port forward one status;; Entry:none, Bank3 selected; Exit:Bank3 is selected; RAM used:Param78; Calls:(1+?);;===========================================;SendReceive	CLRF	PortNumber	CLRF	SRAM_Addr2	MOVLW	low sramComIOParams	MOVWF	SRAM_Addr1;;SendReceive1	CALL	GetOutputBoard	MOVWF	OBoard	BTFSC	STATUS,Z	;This port is used?	GOTO	SendReceive2_2	; No;SendReceive1_0	CALL	GetOutputSlot	MOVWF	OSlot	CALL	GetInputSlot	MOVWF	ISlot	CALL	GetInputBoard	MOVWF	IBoard	CALL	GetOutputPort	MOVWF	OPort	CALL	GetInputPort	MOVWF	IPort;	CALL	GetPortStatus	;W & Param78 = Port Status	BTFSS	STATUS,Z	;Status>0?	GOTO	SendReceive1_2	; Yes;	CALL	GetDataReceived	;0x80 if data not read	ANDLW	0x80	BTFSS	STATUS,Z	GOTO	SendReceive1_1	;no place to put			; incomming data so			; don't test for it.;; handle status=0	CALL	TestDAV	;If the other computer			; has set C_DAV	CALL	GetPortStatus	; Status=1?	BTFSC	STATUS,Z	;Status=0?	GOTO	SendReceive1_1	;Yes: No DAV;	CALL	SetSend	;Status:=2 C_DAV+C_SEND	GOTO	SendReceive2; Data to Send?SendReceive1_1	CALL	GetDataToSend	BTFSS	STATUS,Z	CALL	SetDAV	;Status:=1 S_DAV	GOTO	SendReceive2;;Sending:Status=1 S_DAV(output) is valid test for S_Send(input) and Send DataSendReceive1_2	MOVLW	0x01	SUBWF	Param78,W	BTFSS	STATUS,Z	;PortStatus=1?	GOTO	SendReceive1_3	; No;==== test code;	CLWR;	mCall3To0	lcd_GotoLineW;	MOVF	ledticks,W;	CALL	Disp_decbyteW_D18;	MOVLW	' ';	CALL	DisplaysW_D18;	mBank3;===== end test code	CALL	TestSend	; Yes, if S_Send Status:=2;==== test code;	CALL	GetPortStatus;	CALL	Disp_decbyteW_D18;	mBank3;===== end test code	CALL	GetPortStatus	SUBLW	0x02	BTFSC	STATUS,Z	;Status=2?	CALL	PutData	;Yes, Status:=3 Data out going	GOTO	SendReceive2;;Receiving:Status=2 C_Send(output) is valid test for DataValid(input)SendReceive1_3	MOVLW	0x02	SUBWF	Param78,W		BTFSS	STATUS,Z	;PortStatus=2?	GOTO	SendReceive1_4	; No	CALL	TestDataValid	;if DATAV Status:=3	CALL	GetPortStatus	SUBLW	0x03	BTFSC	STATUS,Z	;Status=3?	CALL	GetData	;Yes, Status:=4, C_Send(output):=off	GOTO	SendReceive2	;No DataValid signal;;Sending:Status=3, DataValid(output)=1, S_DAV(output)=0, S_Send(input)=1SendReceive1_4	MOVLW	0x03	SUBWF	Param78,W	BTFSS	STATUS,Z	;PortStatus=3?	GOTO	SendReceive1_5	; No	CALL	TestNoSend	;wait for S_Send(input)=0	CALL	GetPortStatus	SUBLW	0x04	BTFSC	STATUS,Z	;Status=4?	CALL	ClearData	;Yes, DataValid(output)=0			;Status=0	GOTO	SendReceive2;;Receiving: wait for DataValid(input)=0SendReceive1_5	MOVLW	0x04	SUBWF	Param78,W	BTFSC	STATUS,Z	;Status=5?	CALL	TestNoDataValid	;Yes, if DataValid(input)=0			;Status=0;SendReceive2	CALL	GetPortStatus	MOVWF	Param79	BTFSC	STATUS,Z	;PortStatus=0?	GOTO	SendReceive2_2	; Yes;	CALL	GetOldPortStatus	SUBWF	Param79,W	;PortStatus=OldPortStatus?	BTFSC	STATUS,Z	GOTO	SendReceive2_1	;Yes	MOVF	Param79,W	;No	CALL	SetOldPortStatus;	MOVLW	WDogTime	CALL	SetPortStatusTimer;	GOTO	SendReceive2_2;SendReceive2_1	CALL	GetPortStatusTimer	DECF	Param78,W	CALL	SetPortStatusTimer	MOVF	Param78,F	BTFSS	STATUS,Z	;PortStatusTimer=0?	GOTO	SendReceive2_2	;No	MOVLW	WDogTime	;Yes	CALL	SetPortStatusTimer	CLRW	CALL	SetPortStatus	CALL	ClearAllOuts;SendReceive2_2	INCF	PortNumber,F	MOVLW	0x08	ANDWF	PortNumber,W	BTFSC	STATUS,Z	GOTO	SendReceive1	RETURN;;====================================================================; Clear All output bits for this port; Entry:PortNumber; Exit:none; RAM used:Param78; Calls:;ClearAllOuts	MOVLW	0x0F	CALL	ClrOutput	GOTO	ClearAllOuts2ClearAllOuts1	CALL	OutputClearAllOuts2	DECF	OBit,F	MOVF	OBit,W	ANDLW	0x0F	SUBLW	0x0F	BTFSS	STATUS,Z	GOTO	ClearAllOuts1	RETURN;;================================================================;Test Data Availible (incomming data);if C_DAV(input)=1 then PortStatus:=1;Exit A,X,Y changedTestDAV	MOVLW	C_DAV	CALL	GetInput;	BTFSS	IActive,7	;DAV = 1?	RETURN		; No	MOVLW	0x01	; Yes: Data IS valid	GOTO	SetPortStatus;;==================================================================;Test Data Send (outgoing data);if S_Send(input)=1 then PortStatus:=2;TestSend	MOVLW	S_Send	CALL	GetInput	BTFSS	IActive,7	;Send = 1?	GOTO	TestSend1	; No;	MOVLW	0x02	GOTO	SetPortStatus;;If C_DAV=0 then we are lower priority; test C_DAV if asserted then clear S_DAV and set to PortStatus to 0;TestSend1	MOVLW	C_DAV	IORLW	0x00	BTFSS	STATUS,Z	;C_DAV=0?	RETURN		;No, I have priority.;			;Yes, I'm lower priority.	CALL	TestDAV	;if C_DAV then PortStatus=1	CALL	GetPortStatus	SUBLW	0x01	BTFSS	STATUS,Z	;PortStatus=1?	RETURN		; No	CALL	ClearDAV	;Yes, clear S_DAV	CLRW		;set PortStatus=0	GOTO	SetPortStatus;;==================================================================;Test Data Send has gone (outgoing data was recieved);if S_Send(input)=0 then PortStatus:=PortStatus+1;Exit A,X,Y changedTestNoSend	MOVLW	S_Send	CALL	GetInput;	BTFSC	IActive,7	;skip if high bit = 0	RETURN;	MOVLW	0x04	;We have permition to send	GOTO	SetPortStatus;;==================================================================;Set the send bit (request the other computer put the data on the bus);PortStatus:=PortStatus+1;Exit A,X,Y changed SetSend	MOVLW	C_Send	CALL	SetOutput	MOVLW	0x02	GOTO	SetPortStatus;;==================================================================;Set the DAV bit (tell the other computer data is availible);PortStatus:=1;Exit A,X,Y changed SetDAV	MOVLW	S_DAV	CALL	SetOutput;	MOVLW	0x01	GOTO	SetPortStatus;;==================================================================;Clear the DAV bit (tell the other computer data is not availible);PortStatus = unchanged;ClearDAV	MOVLW	S_DAV	GOTO	ClrOutput;;=============================================================;Test Data Valid (incomming data);Exit: if DataValid then PortStatus:=3;TestDataValid	MOVLW	DataValid	CALL	GetInput	BTFSS	IActive,7	RETURN	MOVLW	0x03	;Data IS valid	GOTO	SetPortStatus;;==============================================================;Test Data Valid (incomming data)=0;Exit: if DataValid=0 then PortStatus:=0; TestNoDataValid	MOVLW	DataValid	CALL	GetInput	BTFSC	IActive,W	RETURN	CLRW		;Data IS valid	GOTO	SetPortStatus;;==============================================================;Clear the output bits DataValid..Data7;Status:=0;Exit A,X,Y changed ClearData	MOVLW	DataValid	CALL	ClrOutput;	MOVLW	0x0B	MOVWF	Param79ClearData1	INCF	OBit,F	CALL	Output	DECFSZ	Param79,F	;loop 11 times B..1	GOTO	ClearData1;	CLRW	GOTO	SetPortStatus;;=====================================================================================;Get DataType and Data from port set DataReceived to 0x80, clear C_Send bit;;Exit DataType, Data, PortStatus:=4, ;GetData	MOVLW	DataType	CALL	GetInput	;lsb of type;test code;	INCF	TestNum,F;	RRF	TestNum,W;	ANDLW	0x03;	MOVWF	Param78	;line #;;	MOVLW	0x0A;	BTFSS	TestNum,0	;start of line?;	GOTO	GetDataT1	;yes;	mCall3To0	lcd_gotoxy;	GOTO	GetDataT2;GetDataT1	MOVF	Param78,W;	mCall3To0	lcd_GotoLineW;GetDataT2	mBank3;end test code	CLRF	Param79	RLF	IActive,W	; Move the bit we just got to C	RRF	Param79,F	; C to MSb of Param79	INCF	IBit,F	; Get the next bit	CALL	Input;	RLF	IActive,W	RRF	Param79,F	INCF	IBit,F	CALL	Input	; MSb of type;	RLF	IActive,W	RRF	Param79,F	;MSb of type to bit 7	RRF	Param79,F	;7->6	SWAPF	Param79,W	;bits 2..0 are now the data type	MOVWF	Param78	MOVLW	IDataType	;0x40	CALL	SetPortData;;test code;	mCall3To0	Disp_decbyteW;	mBank3;end test code	CLRF	Param7B	MOVLW	0x08	;8 bits	MOVWF	Param7A;	INCF	IBit,F	;first bit of dataGetData2	CALL	Input;test code;	MOVLW	'1';	BTFSS	IActive,7;	MOVLW	'0';	mCall3To0	DisplaysW;	mBank3;end test code	RLF	IActive,W	RRF	Param7B,F	INCF	IBit,F	DECFSZ	Param7A,F	GOTO	GetData2;	MOVF	Param7B,W	MOVWF	Param78	MOVLW	IData	;0x48	CALL	SetPortData;test code;	mCall3To0	Disp_decbyteW;	mBank3;end test code; this concludes the receive process; Set the DataReceived flag and set the status to 4	CALL	SetDataReceived;; clear the send bitClearSend	MOVLW	C_Send	CALL	ClrOutput;	MOVLW	0x04	GOTO	SetPortStatus;;===================================================================;Put Data out there DataValid(output):=1;Status:=3;Exit A,X,Y changed PutData;	mCall3To0	lcd_GotoLineW;	MOVF	ledticks,W;	mCall3To0	Disp_decbyteW;	mBank3;		MOVLW	DataType	CALL	SetupForOutput;	MOVLW	ODataType	CALL	GetPortData	MOVWF	Param79	MOVLW	0x03	MOVWF	Param7A;PutData1	RRF	Param79,F	CLRF	OActive	RRF	OActive,F	CALL	Output	INCF	OBit,F	DECFSZ	Param7A,F	GOTO	PutData1;	CALL	GetDataToSend	BTFSC	STATUS,Z	GOTO	PutData2;		CLRW		CALL	SetDataToSend;	MOVLW	OData	CALL	GetPortData	MOVWF	Param79	MOVLW	0x08	MOVWF	Param7A	GOTO	PutData1;;; Clear the DAV bitPutData2	MOVLW	S_DAV	CALL	ClrOutput; Set the DataValid bit	MOVLW	DataValid	CALL	SetOutput;	MOVLW	0x03	;Data IS valid	GOTO	SetPortStatus;;=======================================================;GetDataToSend	MOVLW	DataToSend	GOTO	GetPortData;GetDataReceived	MOVLW	DataReceived	GOTO	GetPortData;GetInputSlot	MOVLW	InputSlot	GOTO	GetPortData;GetOutputSlot	MOVLW	OutputSlot	GOTO	GetPortData;GetInputBoard	MOVLW	InputBoard	GOTO	GetPortData;GetOutputBoard	MOVLW	OutputBoard	GOTO	GetPortData;GetInputPort	MOVLW	InputPort	GOTO	GetPortData;GetOutputPort	MOVLW	OutputPort	GOTO	GetPortData;GetPortStatusTimer	MOVLW	PortStatusTimer	GOTO	GetPortData;GetOldPortStatus	MOVLW	OldPortStatus	GOTO	GetPortData;GetPortStatus	MOVLW	PortStatus;;========================================================; Get a value from the port data table; Entry:PortNumber, SRAM_Addr1, SRAM_Addr2, W=offset (ie OldPortStatus); Exit:W & Param78= data from table, Z; RAM used:Param78; Calls:(1+1) SRAM_Read;GetPortData	ADDWF	PortNumber,W	MOVWF	SRAM_Addr0	mCall3To0	SRAM_Read	mBank3	MOVWF	Param78	RETURN;;========================================================;; Entry:PortNumber, SRAM_Addr1, SRAM_Addr2, ;	Bank3 selected, W=data (ie value to send); Exit: Param78=W, W is unchanged, Bank3 is selected;SetDataToSend	MOVWF	Param78	MOVLW	DataToSend	GOTO	SetPortData;SetODataType	MOVWF	Param78	MOVLW	ODataType	GOTO	SetPortData;SetOutputSlot	MOVWF	Param78	MOVLW	OutputSlot	GOTO	SetPortData;SetInputSlot	MOVWF	Param78	MOVLW	InputSlot	GOTO	SetPortData;SetOutputBoard	MOVWF	Param78	MOVLW	OutputBoard	GOTO	SetPortData;SetInputBoard	MOVWF	Param78	MOVLW	InputBoard	GOTO	SetPortData;SetOutputPort	MOVWF	Param78	MOVLW	OutputPort	GOTO	SetPortData;SetInputPort	MOVWF	Param78	MOVLW	InputPort	GOTO	SetPortData;SetPortStatusTimer	MOVWF	Param78	MOVLW	PortStatusTimer	GOTO	SetPortData;SetOldPortStatus	MOVWF	Param78	MOVLW	OldPortStatus	GOTO	SetPortData;SetDataReceived	MOVLW	0x80	MOVWF	Param78	MOVLW	DataReceived	;sram 0x000458+PortNumber	GOTO	SetPortData;SetPortStatus	MOVWF	Param78	MOVLW	PortStatus;;========================================================; Set a value in the port data table; Entry:PortNumber, SRAM_Addr1, SRAM_Addr2, ;	Bank3 selected, Param78=Data, W=offset (ie OldPortStatus); Exit: W=Param78, Bank3 is selected; RAM used:Param78 (unchanged); Calls:(1+1) SRAM_Write;SetPortData	ADDWF	PortNumber,W	MOVWF	SRAM_Addr0	MOVF	Param78,W	mCall3To0	SRAM_Write	MOVF	Param78,W	mBank3	RETURN;;===========================================================;; Entry:PortNumber, SRAM_Addr1, SRAM_Addr2, W = bit number; Exit:IActive, Bank3 is selected; RAM used:Param78, Param79;GetInput	IORWF	IPort,W	MOVWF	IBit	GOTO	Input;;=======================================================;; Entry:PortNumber, SRAM_Addr1, SRAM_Addr2, W = bit number; Exit:none, Bank3 is selected; RAM used:Param78, Param79;SetOutput	IORWF	OPort,W	MOVWF	OBit	BSF	OActive,7	GOTO	Output;;=======================================================;; Entry:PortNumber, SRAM_Addr1, SRAM_Addr2, W = bit number; Exit:none, Bank3 is selected; RAM used:Param78, Param79;ClrOutput	IORWF	OPort,W	MOVWF	OBit	CLRF	OActive	GOTO	Output;;=======================================================;; Entry:PortNumber, SRAM_Addr1, SRAM_Addr2, W = bit number; Exit:Bank3 is selected; RAM used:Param78, Param79;SetupForOutput	IORWF	OPort,W	MOVWF	OBit	RETURN;	if UseOldDMFEIntf;=================================================================================================; Hardware IO routines;;Old Hardware (6522):;  PB0..PB6 = Bit# 0..127 output only;  PB7 = Data I/O;  PA0..PA2 = Board# 0..7 output only;  PA3 = Slot 0 Device select Active low output only;  PA4 = Slot 1 Device select Active low output only;  PA5 = Slot 2 Device select Active low output only;  PA7 = R/W*  output only;; New Hardware (The Brain PIC16F877);   LDO_8..LDO_14 = Bit# 0..127 output only (J1-25..J1-31);   RA0 = Data I/O (J2-1);   RC0..RC2 = Board# 0..7 output only (J2-17..J2-19);   SEL12 = Slot 0 Device select Active low output only (J1-33);   SEL13 = Slot 1 Device select Active low output only (J1-34);   SEL14 = Slot 2 Device select Active low output only (J1-35);   LDO_15 = R/W* output only (J1-32);; DMFE 16 pin connector; 1  D0 (J1-25) LDO1-0		16  A0 (J2-17) RC0; 2  D1 (J1-26) LDO1-1		15  A1 (J2-18) RC1; 3  D2 (J1-27) LDO1-2		14  A2 (J2-19) RC2; 4  D3 (J1-28) LDO1-3		13  R/W* (J1-32) LDO1-7; 5  D4 (J1-29) LDO1-4		12  DEV* SEL12* or SEL13* or SEL14*; 6  D5 (J1-30) LDO1-5		11  Ground; 7  D6 (J1-31) LDO1-6		10  Ground; 8  D7 (J2-1) RA0		9   Ground;;=================================================================================================;Entry: (CurSM),Y -> OBit;       (CurSM),Y+1 -> high nibble=OSlot, low nibble=OBoard;	OActive=00 or 80 (MSB only);Exit: ;OutputC	CLRF	SRAM_Addr2	MOVF	CurSM+1,W	MOVWF	SRAM_Addr1	MOVF	CurSM,W	GOTO	OutputA_E2;;============================================================;Entry: CurBlk -> OBit;       CurBlk+1 -> high nibble=OSlot, low nibble=OBoard;	OActive=00 or 80 (MSB only);OutputB	MOVFW	CurBlk	MOVWF	OBit	MOVFW	CurBlk+1	GOTO	OutputA1;;=================================================================================================;Entry: (CurBlk),Y -> OBit;       (CurBlk),Y+1 -> high nibble=OSlot, low nibble=OBoard;	OActive=00 or 80 (MSB only);Exit: ;OutputA	CLRF	SRAM_Addr2	MOVF	CurBlk+1,W	MOVWF	SRAM_Addr1	MOVF	CurBlk,WOutputA_E2	ADDWF	YReg,W	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	mCall3To0	SRAM_ReadPI	mBank3	MOVWF	OBit	mCall3To0	SRAM_ReadPI	mBank3OutputA1	MOVWF	Param78	ANDLW	0x07	MOVWF	OBoard	RRF	Param78,F	RRF	Param78,F	RRF	Param78,F	RRF	Param78,W	ANDLW	0x07	MOVWF	OSlot;;OUPUT BIT;Entry: OBit=0..7F, OBoard=0..7, OSlot=0..2;Exit: Bank3 is selected;	OActive=00 or 80 (MSB only)Output	mBank1	BCF	TRISA,0	;output	mBank3	RLF	OActive,W	mBank0	BTFSS	STATUS,C	;Data	BCF	PORTA,0	BTFSC	STATUS,C	BSF	PORTA,0;	mBank3	MOVF	OBit,W	;Address 0..127	ANDLW	0x7F	; R/W* = W*	MOVWF	CMD_LDO_1	mCall3To0	WriteLDO_1;	MOVF	PORTC,W	ANDLW	0xF8	;clr board#	mBank3	MOVWF	Param78	MOVF	OBoard,W	ANDLW	0x07	IORWF	Param78,W	mBank0	MOVWF	PORTC;	mBank3	MOVF	OSlot,W	ANDLW	0x03	;limit to 0..2	ADDLW	Select12	MOVWF	Param78	mBank0	MOVF	PORTB,W	ANDLW	AddressMask	IORWF	Param78,W	MOVWF	PORTB	BCF	PORTB,SelectEnable	NOP	BSF	PORTB,SelectEnable	mBank3	RETURN;;===============================================================================;Entry: (CurSM),Y -> IBit;       (CurSM),Y+1 -> high nibble=ISlot, low nibble=IBoard;Exit: IActive=00 or 80 (MSB only);InputC	CLRF	SRAM_Addr2	MOVF	CurSM+1,W	MOVWF	SRAM_Addr1	MOVF	CurSM,W	GOTO	InputA_E2;;==============================================================================;Entry: CurBlk = IBit;       CurBlk+1 = high nibble=ISlot, low nibble=IBoard;Exit: IActive=00 or 80 (MSB only)InputB	MOVFW	CurBlk	MOVWF	IBit	MOVFW	CurBlk+1	GOTO	InputA2;;===============================================================================;Entry: (CurBlk),Y -> IBit;       (CurBlk),Y+1 -> high nibble=ISlot, low nibble=IBoard;Exit: IActive=00 or 80 (MSB only);InputA	CLRF	SRAM_Addr2	MOVF	CurBlk+1,W	MOVWF	SRAM_Addr1	MOVF	CurBlk,WInputA_E2	ADDWF	YReg,W	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	mCall3To0	SRAM_ReadPI	mBank3	MOVWF	Param78	SUBLW	0xFE	SKPZ	GOTO	InputA1	CLRF	IActive	RETURN;InputA1	MOVF	Param78,W	MOVWF	IBit	mCall3To0	SRAM_Read	mBank3InputA2	MOVWF	Param78	ANDLW	0x07	MOVWF	IBoard	SWAPF	Param78,W	ANDLW	0x03	MOVWF	ISlot;;===============================================================================;Entry: IBit=0..7F, IBoard=0..7, ISlot=0..2;Exit: IActive=00 or 80 (MSB only) Bank3 is selectedInput	mBank1	BSF	TRISA,0	;input;	mBank3	MOVF	IBit,W	;Address 0..127	ANDLW	0x7F	; R/W* = W*	MOVWF	CMD_LDO_1	mCall3To0	WriteLDO_1; Put IBoard on port C:0..C:2	MOVF	PORTC,W	ANDLW	0xF8	;clr board#	mBank3	MOVWF	Param78	MOVF	IBoard,W	ANDLW	0x07	IORWF	Param78,W	mBank0	MOVWF	PORTC; Toggle DEV	mBank3	MOVF	ISlot,W	ANDLW	0x03	;limit to 0..2	ADDLW	Select12	MOVWF	Param78	mBank0	MOVF	PORTB,W	ANDLW	AddressMask	IORWF	Param78,W	MOVWF	PORTB	BCF	PORTB,SelectEnable	;DEV* active	NOP		; write address	BSF	PORTB,SelectEnable	;DEV* inactive; SET R/W* to Read	mBank3	BSF	CMD_LDO_1,7	;R/W*=R	mCall3To0	WriteLDO_1;	MOVF	PORTB,W	ANDLW	AddressMask	IORWF	Param78,W	MOVWF	PORTB	BCF	PORTB,SelectEnable	;DEV* active	NOP	RRF	PORTA,W	;RA0 is the data bit >> C	BSF	PORTB,SelectEnable	mBank3	CLRF	IActive	RRF	IActive,F	;C >> IActive:7	RETURN;;	endif;;;;;