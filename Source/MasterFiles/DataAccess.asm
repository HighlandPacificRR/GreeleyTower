	subtitle	"DataAccess.asm"	page;============================================================================================;;  FileName: DataAccess.asm;  Date: 2/4/2012;  File Version: 1.2.2;  ;  Author: David M. Flynn;  Company: HPRR;  Project: TCC;;============================================================================================;============================================================================================; Revision History;; 1.2.2 2/4/2012	Added "if HasAThrottle" to GetBlkOwnerX; 1.2.1 4/29/2009	Added Comments.; 1.2   6/29/2005	Added SyncBlkPwr.; 1.1   5/1/2005	Removed Panel Specific routines,;	Added GetBlockCmdTable2X,SetBlockCmdTable2X,GetBlockPwrTable2X,SetBlockPwrTable2X; 1.0   9/6/2004	First Reved version.;;============================================================================================; Conditional Assmbly	ifndef UsesSyncBP	constant	UsesSyncBP=0	endif;; UsesGetCabNumX	GetCabNumX; UsesBlockCmdTable	GetBlockCmdTableX, SetBlockCmdTableX,;	GetBlockCmdTable2X, SetBlockCmdTable2X; UsesSyncBP	SyncBlkPwr; UsesAutoSMCtrl	SyncSMs;============================================================================================; Notes:;;Caution most routines called within this include file;  leave Bank3 selected.;;Main.asm should call SetupDMFEIO once then; call DoDMFEIO each pass through the main loop;;6502 RegistersXReg	EQU	Param72YReg	EQU	Param73;;in SMTable each Byte represents one Switch Machine; bit0 = Valid bit set by sending cpu to say "Use this data."; bit1 = Private Valid (Ownership) bit set when Valid and Command bits are set.; bit2 = ; bit3 = ; bit4 = ; bit5 = Feed Back; bit6 = Command if 1 then bit 7 will also be 1; bit7 = Control;;in BlockPwrTable each byte represents one block; bit0 = Cab5; bit1 = Cab4; bit2 = Cab3; bit3 = Cab2; bit4 = Cab1; bit5 = Detect West; bit6 = Detect East; bit7 = Set if any cab is powerd;  if bit 7 is set but bits 0..4 are cleared then look at BlockPwrTable2;  for additional cab bits;;in BlockPwrTable2 each byte represents one block; bit0 = Cab9; bit1 = Cab8; bit2 = Cab7; bit3 = Cab6; bit4 = not used; bit5 = not used; bit6 = not used; bit7 = not used;SMControlMask	EQU	0x7FSMFBMask	EQU	0xDFSMCnFMask	EQU	0xA0	;Control and Feedback bitsSMCMDMask	EQU	0x40	;Command BitSMVDMask	EQU	0x01	;Valid Data bit for TXSMCMDInvMask	EQU	0xBFSMCTRLnCMDMask	EQU	0xC0BlockCount	EQU	kMaxBlockNum+1	;Last block number+1;=========================================================================================; Name	(additional stack words required) Description;=========================================================================================;GetBlkOwnerX	(1+1) Get the block owner flags byte from data ram;GetCabNumX	(1+2) Get the cab number powering this block 0..9;GetSMTableHighX	(1+1) Get SM data from SMTableHigh,X;GetGet_1X	(1+1) Read SRAM at W*256+XReg return in W and Param78;SetSMTableHighX	(1+1) Store the W at SMTableHigh,X;GetCurBlkY	(1+1) Get data from SRAM (CurBlk),Y;GetSMDispPtrY	(1+1) Get data from SRAM (SMDispPtr),Y;GetBlockCmdTableX	(1+1) Get the Block Power Command data at BlockCmdTable,X;SetBlockCmdTableX	(1+1) Store the W in Block Power Command data at BlockCmdTable,X;GetBlockCmdTable2X	(1+1) Get the Block Power Command data at BlockCmdTable2,X;SetBlockCmdTable2X	(1+1) Store the W in Block Power Command data at BlockCmdTable2,X;GetBlockPwrTableX	(1+1) Get the Block Power data at BlockPwrTable,X;SetBlockPwrTableX	(1+1) Store the W in Block Power data at BlockPwrTable,X;SetSet_1X	(1+1) Store Param78 in SRAM at W*256+XReg;GetBlockPwrTable2X	(1+1) Get the Block Power data at BlockPwrTable2,X;SetBlockPwrTable2X	(1+1) Store the W in Block Power data at BlockPwrTable2,X;GetSMTableX	(1+1) Get SM data from SMTable,X;SetSMTableX	(1+1) Store the W at SMTable,X;SyncBlkPwr	(1+2) If Block Cmd = 0 and Block Pwr = 0 then clear valid bit;	if HasAThrottle;=========================================================================================; Get the block owner flags byte from data ram; Param78=(BlockOwner,X);; Entry: XReg; Exit: W & Param78; RAM used: Param78, XReg; Calls: GetGet_Read;GetBlkOwnerX	MOVLW	high BlockOwner	ADDLW	low evDataROM	MOVWF	SRAM_Addr1	MOVLW	low BlockOwner	ADDWF	XReg,W	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	GOTO	GetGet_Read;	endif;	if UsesGetCabNumX;=========================================================================================; Get the cab number powering this block;; Entry: XReg=BlkNum, bank3; Exit: Param78 & W = Cab# 0..9, Bank3; RAM Used: XReg, Param78, Param79; Calls: (1+2) GetBlockPwrTableX,GetBlockPwrTable2X;GetCabNumX	CALL	GetBlockPwrTableX	BTFSS	Param78,7	;Anycab	GOTO	GetCabNumX_NoCab	; No;	MOVWF	Param79	ANDLW	0x1F	;1..5?	SKPNZ	GOTO	GetCabNumX_1;	MOVLW	0x05	MOVWF	Param78GetCabNumX_L1	BTFSC	Param79,0	GOTO	GetCabNumX_Found	RRF	Param79,F	DECFSZ	Param78,F	GOTO	GetCabNumX_L1;GetCabNumX_NoCab	CLRF	Param78GetCabNumX_Found_End	MOVF	Param78,W	RETURN;GetCabNumX_1	CALL	GetBlockPwrTable2X	MOVWF	Param79	MOVLW	0x09	MOVWF	Param78GetCabNumX_L2	BTFSC	Param79,0	GOTO	GetCabNumX_Found	RRF	Param79,F	DECFSZ	Param78,F	GOTO	GetCabNumX_L2;; We have a throttle number, it must be translated into a Cab number.GetCabNumX_Found	MOVLW	0x06	SUBWF	Param78,W	SKPNB		;<=5?	GOTO	GetCabNumX_Found_End	; Yes;6..9 need translating;	MOVLW	0x08	SUBWF	Param78,W	SKPB		;Thr 8 or 9?	GOTO	GetCabNumX_NoCab	; Yes, they don't route return 0x00;	MOVLW	0x06	SUBWF	Param78,W	SKPZ		;Thr 6?	GOTO	Throttle7ToCab	; No;			  No, must be 7Throttle6ToCab	MOVLW	High BlkThr6ToCab	MOVWF	SRAM_Addr1	MOVLW	low BlkThr6ToCab	GOTO	ThrottleToCab;Throttle7ToCab	MOVLW	High BlkThr7ToCab	MOVWF	SRAM_Addr1	MOVLW	low BlkThr6ToCab;;ThrottleToCab	ADDWF	XReg,W	;BlkNum	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	MOVLW	low evDataROM	ADDWF	SRAM_Addr1,F	GOTO	GetGet_Read;;	endif;;=========================================================================================; Get SM data from SMTableHigh,X;; Entry: XReg, bank3; Exit: Param78 & W = SMData, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Read;;6502:	LDA	SMTableHigh,X;PIC16:	CALL	GetSMTableHighX;GetSMTableHighX	MOVLW	low SMTableHighGetGet_1X	MOVWF	SRAM_Addr1	MOVF	XReg,W	MOVWF	SRAM_Addr0GetGet_Read	CLRF	SRAM_Addr2	;MSB is 0x00 on all	mCall2To0	SRAM_Read	MOVWF	Param78B3_Return	mBank3	RETURN;;;=========================================================================================; Store the W at SMTableHigh,X;; Entry: W, XReg, bank3; Exit: Param78 & W = SMData, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Write;;6502:	STA	SMTableHigh,X;PIC16:	CALL	SetSMTableHighX;SetSMTableHighX	MOVWF	Param78	MOVLW	low SMTableHigh	GOTO	SetSet_1X;;=========================================================================================; Get data from SRAM (CurBlk),Y;; Entry: YReg, bank3; Exit: Param78 & W = Data, Bank3; RAM Used: YReg, Param78; Calls: (1+1) SRAM_Read;;6502:	LDA	(CurBlk),Y;PIC16:	CALL	GetCurBlkY;GetCurBlkY	MOVF	CurBlk+1,W	MOVWF	SRAM_Addr1	MOVF	CurBlk,W	ADDWF	YReg,W	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	GOTO	GetGet_Read;;=========================================================================================; Get data from SRAM (SMDispPtr),Y;; Entry: YReg, bank3; Exit: Param78 & W = SMData, Bank3; RAM Used: YReg, Param78; Calls: (1+1) SRAM_Read;;6502:	LDA	(SMDispPtr),Y;PIC16:	CALL	GetSMDispPtrY;GetSMDispPtrY	MOVFW	SMDispPtr+1	MOVWF	SRAM_Addr1	MOVFW	SMDispPtr	ADDWF	YReg,W	MOVWF	SRAM_Addr0	ADDCF	SRAM_Addr1,F	GOTO	GetGet_Read;;=========================================================================================	if UsesBlockCmdTable;=========================================================================================; Get the Block Power Command data at BlockCmdTable,X;; Entry: XReg, bank3; Exit: Param78 & W = BlockCmdTable, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Write;;6502:	LDA	BlockCmdTable,X;PIC16:	CALL	GetBlockCmdTableX;GetBlockCmdTableX	MOVLW	low BlockCmdTable	GOTO	GetGet_1X;;=========================================================================================; Store the W in Block Power Command data at BlockCmdTable,X;; Entry: W, XReg, bank3; Exit: Param78 & W = BlockCmdTable, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Write;;6502:	STA	BlockCmdTable,X;PIC16:	CALL	SetBlockCmdTableX;SetBlockCmdTableX	MOVWF	Param78	MOVLW	low BlockCmdTable	GOTO	SetSet_1X;;=========================================================================================; Get the Block Power Command data at BlockCmdTable2,X;; Entry: XReg, bank3; Exit: Param78 & W = BlockCmdTable, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Write;GetBlockCmdTable2X	MOVLW	low BlockCmdTable2	GOTO	GetGet_1X;;=========================================================================================; Store the W in Block Power Command data at BlockCmdTable2,X;; Entry: W=BlockCmd, XReg, bank3; Exit: Param78 & W = BlockCmd, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Write;SetBlockCmdTable2X	MOVWF	Param78	MOVLW	low BlockCmdTable2	GOTO	SetSet_1X;	endif;=========================================================================================; Get the Block Power data at BlockPwrTable,X;; Entry: XReg, bank3; Exit: Param78 & W = BlockPwrTable, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Write;;6502:	LDA	BlockPwrTable,X;PIC16:	CALL	GetBlockPwrTableX;GetBlockPwrTableX	MOVLW	low BlockPwrTable	GOTO	GetGet_1X;;=========================================================================================; Store the W in Block Power data at BlockPwrTable,X;; Entry: W, XReg, bank3; Exit: Param78 & W = BlockPwrTable, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Write;;6502:	STA	BlockPwrTable,X;PIC16:	CALL	SetBlockPwrTableX;SetBlockPwrTableX	MOVWF	Param78	MOVLW	low BlockPwrTable;SetSet_1X	MOVWF	SRAM_Addr1	CLRF	SRAM_Addr2	MOVF	XReg,W	MOVWF	SRAM_Addr0	MOVF	Param78,W	mCall2To0	SRAM_Write	MOVF	Param78,W	GOTO	B3_Return;;=========================================================================================; Get the Block Power data at BlockPwrTable2,X;; Entry: XReg, bank3; Exit: Param78 & W = BlockPwrTable, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Write;GetBlockPwrTable2X	MOVLW	low BlockPwrTable2	GOTO	GetGet_1X;;=========================================================================================; Store the W in Block Power data at BlockPwrTable2,X;; Entry: W, XReg, bank3; Exit: Param78 & W = BlockPwrTable, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Write;SetBlockPwrTable2X	MOVWF	Param78	MOVLW	low BlockPwrTable2	GOTO	SetSet_1X;;;=========================================================================================; Get SM data from SMTable,X;; Entry: XReg, bank3; Exit: Param78 & W = SMData, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Read;;6502:	LDA	SMTable,X;PIC16:	CALL	GetSMTableX;GetSMTableX	MOVLW	low SMTable	GOTO	GetGet_1X;;=========================================================================================; Store the W at SMTable,X;; Entry: W, XReg, bank3; Exit: Param78 & W = SMData, Bank3; RAM Used: XReg, Param78; Calls: (1+1) SRAM_Write;;6502:	STA	SMTable,X;PIC16:	CALL	SetSMTableX;SetSMTableX	MOVWF	Param78	MOVLW	low SMTable	GOTO	SetSet_1X;	if UsesSyncBP;=========================================================================================; If Block Cmd = 0 and Block Pwr = 0 then clear valid bit.; Call this low level maintenence routine once each time through the main loop ;; Entry: SyncBlkNum, bank3; Exit: SyncBlkNum++, Bank3; RAM Used: XReg, Param78, Param79; Calls: (1+2) GetBlockCmdTableX,SetBlockCmdTableX,GetBlockCmdTable2X,SetBlockCmdTable2X,;	GetBlockPwrTableX,GetBlockPwrTable2X;SyncBlkPwr	MOVF	SyncBlkNum,W	MOVWF	XReg	CALL	GetBlockCmdTableX	MOVWF	Param79	BTFSS	Param78,7	;valid bit	GOTO	SyncBlkPwr_1	ANDLW	0x1F	SKPZ		;Any cab bit set?	GOTO	SyncBlkPwr_1	; Yes	CALL	GetBlockPwrTableX	ANDLW	0x1F	SKPZ		;Any cab bit set?	GOTO	SyncBlkPwr_1	; Yes	BCF	Param79,7	MOVF	Param79,W	CALL	SetBlockCmdTableX;SyncBlkPwr_1	CALL	GetBlockCmdTable2X	MOVWF	Param79	BTFSS	Param78,7	;valid bit	GOTO	SyncBlkPwr_End	ANDLW	0x0F	SKPZ		;Any cab bit set?	GOTO	SyncBlkPwr_End	; Yes	CALL	GetBlockPwrTable2X	ANDLW	0x0F	SKPZ		;Any cab bit set?	GOTO	SyncBlkPwr_End	; Yes	BCF	Param79,7	MOVF	Param79,W	CALL	SetBlockCmdTable2X;SyncBlkPwr_End	INCF	SyncBlkNum,F	MOVF	SyncBlkNum,W	SUBLW	BlockCount	SKPNZ	CLRF	SyncBlkNum	RETURN;	endif;=========================================================================================;	if UsesAutoSMCtrl;===================================================================================================;kill Valid bits if Cmd = Ctrl;SyncSMs	MOVF	SyncSMNum,W	MOVWF	XReg	CALL	GetSMTableX	BTFSS	Param78,0	;valid bit	GOTO	SyncSMs_1	BCF	Param78,0	ANDLW	0xC0	;Ctrl and Cmd	SKPNZ	GOTO	SyncSMs_SetLow	;Both are clear so clr valid bit	XORLW	0xC0	;Ctrl and Cmd	SKPZ	GOTO	SyncSMs_1	;not the same;SyncSMs_SetLow	MOVF	Param78,W	CALL	SetSMTableX;SyncSMs_1	CALL	GetSMTableHighX	BTFSS	Param78,0	Valid bit	GOTO	SyncSMs_2	BCF	Param78,0	ANDLW	0xC0	;Ctrl and Cmd	SKPNZ	GOTO	SyncSMs_SetHi	;Both are clear so clr valid bit	XORLW	0xC0	;Ctrl and Cmd	SKPZ	GOTO	SyncSMs_2;SyncSMs_SetHi	MOVF	Param78,W	CALL	SetSMTableHighX;SyncSMs_2	INCF	SyncSMNum,F	RETURN	endif;